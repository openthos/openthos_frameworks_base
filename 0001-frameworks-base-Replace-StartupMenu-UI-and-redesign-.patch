From 5b8de722dc59a16baa0fc8ff799f5f7db95604aa Mon Sep 17 00:00:00 2001
From: Liu Xiaoxu <liuxiaoxu@openthos.org>
Date: Mon, 11 May 2020 05:08:19 +0000
Subject: [PATCH] frameworks: base: Replace StartupMenu UI and redesign
 StartupMenu codes.

Signed-off-by: Liu Xiaoxu <liuxiaoxu@openthos.org>
Reviewed-by: Wang Zhixu <wangzhixu@openthos.org>
---
 .../SystemUI/assets/fonts/PingFang_SC_Regular.ttf  | Bin 0 -> 10244 bytes
 .../color/starupmenu_dialog_item_text_selector.xml |   7 +
 packages/SystemUI/res/drawable-mdpi/excel.png      | Bin 0 -> 2204 bytes
 .../SystemUI/res/drawable-mdpi/ic_launcher.png     | Bin 0 -> 2060 bytes
 packages/SystemUI/res/drawable-mdpi/ppt.png        | Bin 0 -> 911 bytes
 .../res/drawable-mdpi/startupmenu_filemanager.png  | Bin 0 -> 291 bytes
 .../res/drawable-mdpi/startupmenu_poweroff.png     | Bin 0 -> 571 bytes
 .../res/drawable-mdpi/startupmenu_recent_null.png  | Bin 0 -> 1642 bytes
 .../res/drawable-mdpi/startupmenu_search.png       | Bin 0 -> 440 bytes
 .../res/drawable-mdpi/startupmenu_settings.png     | Bin 0 -> 992 bytes
 packages/SystemUI/res/drawable-mdpi/txt.png        | Bin 0 -> 407 bytes
 packages/SystemUI/res/drawable-mdpi/word.png       | Bin 0 -> 2031 bytes
 packages/SystemUI/res/drawable/menu_dialog_bg.xml  |   6 +
 .../res/drawable/menu_dialog_item_selector.xml     |  33 +
 .../res/drawable/menu_dialog_list_selector.xml     |  15 +
 .../res/drawable/startupmenu_leftimg_selector.xml  |  14 +
 .../drawable/startupmenu_recent_app_selector.xml   |  14 +
 .../res/drawable/startupmenu_recent_list_bg.xml    |   9 +
 packages/SystemUI/res/drawable/text_underline.xml  |  13 +
 packages/SystemUI/res/layout/menu_dialog.xml       |  30 +-
 packages/SystemUI/res/layout/menu_dialog_item.xml  |  28 +-
 .../SystemUI/res/layout/startupmenu_app_list.xml   |  69 ++
 .../res/layout/startupmenu_recent_apps.xml         |  20 +
 .../res/layout/startupmenu_recent_docs.xml         |  42 ++
 .../SystemUI/res/layout/systemui_startupmenu.xml   | 172 +++++
 packages/SystemUI/res/values-zh-rCN/strings.xml    |  13 +
 packages/SystemUI/res/values/arrays.xml            |  13 +-
 packages/SystemUI/res/values/colors.xml            |   2 +-
 packages/SystemUI/res/values/dimens.xml            |   7 +
 packages/SystemUI/res/values/strings.xml           |  13 +
 packages/SystemUI/res/xml/fileprovider.xml         |   5 +-
 .../com/android/systemui/dialog/BaseDialog.java    |   4 +-
 .../com/android/systemui/dialog/BatteryDialog.java |  17 +-
 .../com/android/systemui/dialog/DialogType.java    |   2 +-
 .../com/android/systemui/dialog/MenuDialog.java    |  67 +-
 .../android/systemui/dialog/StartupMenuDialog.java |   1 -
 .../android/systemui/startupmenu/AppAdapter.java   | 243 ++++---
 .../systemui/startupmenu/AppRecentAdapter.java     | 139 ++++
 .../systemui/startupmenu/BounceListView.java       | 106 +++
 .../android/systemui/startupmenu/FontTextView.java |  32 +
 .../systemui/startupmenu/LaunchAppUtil.java        |  67 --
 .../systemui/startupmenu/RecentDocsAdapter.java    | 121 ++++
 .../systemui/startupmenu/SqliteOpenHelper.java     |  90 +--
 .../systemui/startupmenu/StartupMenuView.java      | 732 +++++++++++----------
 .../android/systemui/startupmenu/bean/AppInfo.java | 176 ++---
 .../startupmenu/listener/OnClickCallback.java      |   3 +
 .../systemui/startupmenu/listener/OnMenuClick.java |   2 -
 .../listener/OnRecentAppClickCallback.java         |  10 +
 ...Callback.java => OnRecentDocClickCallback.java} |   5 +-
 .../listener/RecentAppDataCallback.java            |   5 +
 .../startupmenu/utils/AppOperateManager.java       | 176 ++++-
 .../systemui/startupmenu/utils/HanziToPinyin.java  | 569 ++++++++++++++++
 .../android/systemui/startupmenu/utils/Util.java   | 491 ++++++++++++++
 .../android/systemui/statusbar/phone/QSView.java   |  16 +-
 .../systemui/statusbar/phone/StatusBar.java        |  15 +-
 .../systemui/statusbar/view/TaskBarIcon.java       |  10 +-
 56 files changed, 2800 insertions(+), 824 deletions(-)
 create mode 100644 packages/SystemUI/assets/fonts/PingFang_SC_Regular.ttf
 create mode 100644 packages/SystemUI/res/color/starupmenu_dialog_item_text_selector.xml
 create mode 100644 packages/SystemUI/res/drawable-mdpi/excel.png
 create mode 100644 packages/SystemUI/res/drawable-mdpi/ic_launcher.png
 create mode 100644 packages/SystemUI/res/drawable-mdpi/ppt.png
 create mode 100644 packages/SystemUI/res/drawable-mdpi/startupmenu_filemanager.png
 create mode 100644 packages/SystemUI/res/drawable-mdpi/startupmenu_poweroff.png
 create mode 100644 packages/SystemUI/res/drawable-mdpi/startupmenu_recent_null.png
 create mode 100644 packages/SystemUI/res/drawable-mdpi/startupmenu_search.png
 create mode 100644 packages/SystemUI/res/drawable-mdpi/startupmenu_settings.png
 create mode 100644 packages/SystemUI/res/drawable-mdpi/txt.png
 create mode 100644 packages/SystemUI/res/drawable-mdpi/word.png
 create mode 100644 packages/SystemUI/res/drawable/menu_dialog_bg.xml
 create mode 100644 packages/SystemUI/res/drawable/menu_dialog_item_selector.xml
 create mode 100644 packages/SystemUI/res/drawable/menu_dialog_list_selector.xml
 create mode 100644 packages/SystemUI/res/drawable/startupmenu_leftimg_selector.xml
 create mode 100644 packages/SystemUI/res/drawable/startupmenu_recent_app_selector.xml
 create mode 100644 packages/SystemUI/res/drawable/startupmenu_recent_list_bg.xml
 create mode 100644 packages/SystemUI/res/drawable/text_underline.xml
 create mode 100644 packages/SystemUI/res/layout/startupmenu_app_list.xml
 create mode 100644 packages/SystemUI/res/layout/startupmenu_recent_apps.xml
 create mode 100644 packages/SystemUI/res/layout/startupmenu_recent_docs.xml
 create mode 100644 packages/SystemUI/res/layout/systemui_startupmenu.xml
 create mode 100644 packages/SystemUI/src/com/android/systemui/startupmenu/AppRecentAdapter.java
 create mode 100644 packages/SystemUI/src/com/android/systemui/startupmenu/BounceListView.java
 create mode 100644 packages/SystemUI/src/com/android/systemui/startupmenu/FontTextView.java
 delete mode 100644 packages/SystemUI/src/com/android/systemui/startupmenu/LaunchAppUtil.java
 create mode 100644 packages/SystemUI/src/com/android/systemui/startupmenu/RecentDocsAdapter.java
 create mode 100644 packages/SystemUI/src/com/android/systemui/startupmenu/listener/OnRecentAppClickCallback.java
 rename packages/SystemUI/src/com/android/systemui/startupmenu/listener/{DataCallback.java => OnRecentDocClickCallback.java} (50%)
 create mode 100644 packages/SystemUI/src/com/android/systemui/startupmenu/listener/RecentAppDataCallback.java
 create mode 100644 packages/SystemUI/src/com/android/systemui/startupmenu/utils/HanziToPinyin.java
 create mode 100644 packages/SystemUI/src/com/android/systemui/startupmenu/utils/Util.java

diff --git a/packages/SystemUI/assets/fonts/PingFang_SC_Regular.ttf b/packages/SystemUI/assets/fonts/PingFang_SC_Regular.ttf
new file mode 100644
index 0000000000000000000000000000000000000000..42b466ba0813238a2ee96acc71df53c435ee3d0b
GIT binary patch
literal 10244
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

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/color/starupmenu_dialog_item_text_selector.xml b/packages/SystemUI/res/color/starupmenu_dialog_item_text_selector.xml
new file mode 100644
index 0000000..64d4cdb
--- /dev/null
+++ b/packages/SystemUI/res/color/starupmenu_dialog_item_text_selector.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_focused="true" android:color="@android:color/white" />
+    <item android:state_pressed="true" android:color="@android:color/white" />
+    <item android:state_selected="true" android:color="@android:color/white" />
+    <item android:color="#FF202020" />
+</selector>
diff --git a/packages/SystemUI/res/drawable-mdpi/excel.png b/packages/SystemUI/res/drawable-mdpi/excel.png
new file mode 100644
index 0000000000000000000000000000000000000000..9048450a95bd6d91b59a48b53f675f52d3cac671
GIT binary patch
literal 2204
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

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-mdpi/ic_launcher.png b/packages/SystemUI/res/drawable-mdpi/ic_launcher.png
new file mode 100644
index 0000000000000000000000000000000000000000..64ba76f75e9ce021aa3d95c213491f73bcacb597
GIT binary patch
literal 2060
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

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-mdpi/ppt.png b/packages/SystemUI/res/drawable-mdpi/ppt.png
new file mode 100644
index 0000000000000000000000000000000000000000..ce243f11f2193ec021e9148090a4534d87fada83
GIT binary patch
literal 911
zcmV;A191F_P)<h;3K|Lk000e1NJLTq001EX001Ef1^@s6SLDKP00001b5ch_0Itp)
z=>Px&Nl8ROR9FekR!e9TQ4~Eh&8JOci})`ZETw9zLTg*a3au-Jf{UU;scRR4f@sB!
z8x^4{QRvEL-MJQBxeymFw5TY86vYo}FbMXSe$plx&rLe*bec5tCR6mnV`kpF@18T~
z-uKa9G2<NG!9bm*OYJoS4QaeU7=2n4ubfWSZH{4v3At-}2-P(e*woOD5%e49vCkH}
z;HRBLvY=<NfixXL>w)fT0c>gNB#|hIG!>gB<8~67lS%n~3?MZN)HVaXH~ok-iz2s-
z%h;RWf3eq2VsS+Ijr=tdF;YN%8*u7&0JUu$h*ObEE2qXo62h89j0}*O0V0h+&y64=
zt%pfufT=lH=)XKBAuv=ULn3LWCbEZ$Fg5k<2eLJC7Q6Bh@s@<naDgye6%echeC15d
zeiFIk!_JOYB+*Aj8tg=T_72zIQV+A!z_%fiSVJ}D7>a#T`#NDdd;It_d=iQHCw6|Y
z;&?|wC*bH8VBmx`{`@;@#qS5oShWGLa+jKSBqXjZ@VpU45!OhW(r8(E#CyT=PFWar
z^Wvh)TugDpY~?xLkdQQ#V9wJaKwSPv23Yhacjj8oj0}&QAfH^3%QMctBIcZgfK}E2
zr|%Jr`+!uT&X$}4e!K;qKLBEH=))nYLj`kALO^}|-MV%Ht)l{5X(<x$R{)JifR^LH
z;2B`}3BWEDGj(+~N4DcR0#A<t53d3j4*~rI|Na_SyA9~Nz>O-jno3xB8qCdj4EXgP
z82Jhe?ch1l0&M0p%x!yuL=`kvaJ7)o%Ydp4K+RTQ<91;8Q5GkOjm3c}ZrvPKF?S@&
ztAS%oN7t3yK_!TzROV3>n3>=Wi{A>x>5hb?Bk`NEvt_s){~QLM4FVsZ0zA7^2+&(4
zbK*X4)8oM7>umR#7WU0?pO6%|ARrOdmC(4LG%i<-sD6S=1Rjvt+p0ne1l%;|Bm_V%
zEkYp0>zimUe{U{wmjr}}a}s4lnPl<Z?ItjPJ@GkLfD)xdb525l<cx^D%t6XbX(cF-
z3#6iiIYSOA(>x#`q0Ee$VgJeVzaU|+36BIWAZYG>xeUXugf-&@B9+i>WJ}rp<I9$4
lg4NC=aMf&*k-5(=wZ9AN#M6mJBwGLg002ovPDHLkV1iUEoI(Hq

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-mdpi/startupmenu_filemanager.png b/packages/SystemUI/res/drawable-mdpi/startupmenu_filemanager.png
new file mode 100644
index 0000000000000000000000000000000000000000..61011f8632ea45e4a31cfb5253744ec23640a82a
GIT binary patch
literal 291
zcmV+;0o?wHP)<h;3K|Lk000e1NJLTq0015U0015c1^@s6J20-I00001b5ch_0Itp)
z=>Px#-AP12R7eeDU>F6XAu!xRfDxaE6ciMu1LZTYsbOSf`~?)B!_3UwaOcjQ*T`zr
z)zx`#-n{u4Sqz<x(_&p+UBS<vKfmMS<Kww>>C#tpjmE~tT<_k!tN#E0e<e^3!yKT)
z*51E=KLlMLLB67*VjR%N>j)`SQBh$>SL5K|zyZ|zPgz;n16>Zr$8af30;usRkSzt{
zlSw~)@Zf<ANqT`6|0hWU7RC6?V8WuFE<&Rg(<PWemW&4VXi(EE1V&!sV!;!Z&+wJC
pc=RDlfhw9&Fd71*Awb&@003IsE+2IXn>YXf002ovPDHLkV1npPd%FMt

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-mdpi/startupmenu_poweroff.png b/packages/SystemUI/res/drawable-mdpi/startupmenu_poweroff.png
new file mode 100644
index 0000000000000000000000000000000000000000..bcfe85a997c508b14baddb0c0d79660154c351b1
GIT binary patch
literal 571
zcmV-B0>u4^P)<h;3K|Lk000e1NJLTq0015U0015c1^@s6J20-I00001b5ch_0Itp)
z=>Px$^+`lQR7ef&RL@HSK^S#&5oL)oFbXf~3Skl?dMHBhP;|(v_n;0P`vU?g6pHB9
zDe%^*Jq1M&-8)rY1PN0QVTG1jcFAA80R@x&b{9KzXa|OwdEa~A+xcc^3<kaF70@g2
z*A;L$98uN>{f?nQg}>FQ8e><>E|+W9>-Cz{%p#G95!^ku+Z|HlDjFlf91<i<CewZ@
zmHJXkCP`A0@te)21nsmEU(px|wm6R4NvG4VN=bTS*=+V6n$1R|anNqJx!zdsoHQ0i
zaU8;hKp>Fl6=<1TES6K4&-;A75sFV5!*mhi^G^9Fy)2GnsUdJytyaUb1b|A$lZZc4
zLJjyEIHMGgrvhqtKA+!K;Z#wvVTwcU7@{YLCMcl>d=|%*qIgQiR}ikSyGe;DoZWe7
z{rLDK#UYcH%jHk2)fy}m3PPn)xuFus;esHn12^Y#xg)ta!^j=8pwVcIVK~HNU}I}7
z4O|htD70}ce3FCvyy|p1-_fT?QYXMn!TZ3oxuM1-OWhTs<Vlpgg!M7T7rWj5P%IXI
zJfERZ$c*?}tJS*1xrR~Vldhf`$tSH}fL+Yshl!&H5xamv3G*68hWmkC^E@BRWHNXC
zTDi4mV<v_H=ka*P>h<~(c4x!d0^>B!^A?7Wat1o4SK$9t;2S#$qvTpzoxA`5002ov
JPDHLkV1o5H0k8l7

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-mdpi/startupmenu_recent_null.png b/packages/SystemUI/res/drawable-mdpi/startupmenu_recent_null.png
new file mode 100644
index 0000000000000000000000000000000000000000..9db69f6d3bf6add8dab8ebaeb8314677facda168
GIT binary patch
literal 1642
zcmeH|{ZCV86vywq-j=qgT!z5dv|f~nuaoEm#i6%d0gXZ(5~(sMV-r-Q)lr~UpfA24
z8qxW(_-@I}M4<&0S}3$suo?qGvnf?-1ypDYX%X>Kw6@*-H<s*|=X}o(C!gdb=kru-
zNlu(W`-%ntz>JL>SSbJi#uB-RLMC2L9oI(`uplLo2`IZ~+W~+av600{6@m`Si{H!%
z2x-eA)xC3P)t`N7!{L{+*^$h!Bgm|U*->wY7{TrF5mBX@!V`Zj9QtUt+gnuPT`ea8
z5UPNd_b6_&E6(4lAiA@d_R_sT6hn7l#&~twewcDjB46nTQy%zJG*cl<P6Hq#mrOy9
zg(8CSW!q2?l66l<P-Ho3d!1g3K`?wZjF`^Ej0QDF3R5VtD=`VyDv_Vy-+`zIBFK>d
zQX$9)?awBCfugo9f;kS!zSS9M5g2B?2tx2{5}Z+TB6x#@08jfL{9jx3^dKQG*W2ir
zdsH!iKalYRepjwzN{p1Tv&*XTMcv)Zh)L;hrvB=msw+9L?2b$c)wPekOES($b{>Z5
z30Yx#aQ1U<pVz(%WE3|vO#}*OOLrQR&ikG!pO!seV4L}8(L5+1vOYvW`mt`LjOPwt
zUyTUjdGj%OIYzR4pj+Ng75X-rdyWjgUo)ojj9Yp>uppRnCA2y;WkT-0Y4O%L#A+?m
zSx-O{94wfgESD*n4wtEurU}0+|GM3I1Ew?OnNK{ulRt2^SI^*d%c5XcAX;CpZ+6)x
zS9^zlp=h3@(l<!-M<AJ#85IzT4R~SL;=#L)Q<0`L&?nHEy0^zj%^^(}(+Ug`Hr_!_
zZKYmIdzotdD15A~{Jk(p*oJvNJ)6bC15Xcmz4OHfhXtScuIa4{Y~<H#S4kNVZl>a!
zaK7i7eFb3RrG@=t8WH6O3p&=JpT}r9zFUUb-pH*v*5dPkbU%b^``-j)Cs!4Z+`XOA
z(suc<d^BNH4?CIi6$6h{ZTN`uSoR+v$6Ct`ukqYYGG-X8kBjGRDJZi?i<3*IP4<cC
z?lY@QW)42W%XEFy)9=1B^ghvCH?w)i1^E(^c^R#%ZLn8q(pb4IhFIRuN$DL8beCte
zY>&lSS>VjOS=m^`on!4$ncT-(^5@H(f8T%Uzc1!HzrLkWW4NGHQ+ueZj=!$juPC%y
z_tae+EK1yq$LT`$<@NjWTqcpv)p$#;Fl;`wCZl(vSILhXzIG}-WOZ9yTc-7=SFZ}@
z?0&RkbX?#QT->G>dHq{y+RW?C3h|}h8nse9c!S(<`~tbqaX0R5mFfVcyDqdnUCp1d
zXJoe`udKAwkzQjEJ*1`@pSgvN+#nI|*;=LQ3<&GnADzEys@%(79IaUFW^~G18~S!~
zGCq}@irlBbo@9B>sUUvesP5z5-Ye{brPq{`w5IUuiV5l90`a@(xknGN9Rj#0uo^HA
z-K=V<&FNq$4^TCO@90dza)j1+B>}ZW>V{;>mGvD#XcXbalVj3g1T}8QjD_SPAp}1p
z#5x{V4?%D&k-GIW*%Cb=$QYg9Ho}~_Aj1^)e2|KKNf`E_OHZR9wxy^ocG}wSLFf$$
zwoK7EAP8M0oSB<d9*JeO5|?ILFO1Q#mY~?ceNv_l(kABb4tKt&B0djbV|+48$;^`d
E3q6m=aR2}S

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-mdpi/startupmenu_search.png b/packages/SystemUI/res/drawable-mdpi/startupmenu_search.png
new file mode 100644
index 0000000000000000000000000000000000000000..762dd97af9348b9bccaa280b49251a81a2e81878
GIT binary patch
literal 440
zcmV;p0Z0CcP)<h;3K|Lk000e1NJLTq0015U0015c1^@s6J20-I00001b5ch_0Itp)
z=>Px$a!Eu%R7ef&R8336KoD)dw1kp_gd9pri-%kSTEvStf4V<Fyage6$U&46qpg(K
zd^-;egtBg@9%Xac-I=%V?Y!*lXrw;nfO0@N@J9!<WA=q%c(U8=g0^kXG)<dyUANVB
z{e3(h$59lO$8Z^3a1aD;Q4}{Mv?1ZA`F#GkUavn4!<dw1dEt59Cd;y%%g3r1mF9VV
zYgyJq9LI0_<TzASRadrc-*GF~_en%+*h`f?i$sA(9C_eG`$aL9F#c&>*DoT1K88GS
z{rb?z62?VZEEZcC8S=o%FvA>67`Hb`5-BP2zzxY|bCxh##x%{Tj0kz)WSC)&C5%38
zn#RZN9d7RDh$9bNA3HR%`Z!I~27QW_ab5S+ahz(oT-HSH(E6M%)+PPlPii-UrmTmA
z)yMtmWiJ;U%Au;SsjcpRYrCEY<59xHjiULF<t%ZQ)glp53{U24HhZP&r@rrhtyZf_
igi|r)fO6n}IPeV$zpd?GrxPLo0000<MNUMnLSTaIvB<vw

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-mdpi/startupmenu_settings.png b/packages/SystemUI/res/drawable-mdpi/startupmenu_settings.png
new file mode 100644
index 0000000000000000000000000000000000000000..71e4194ccb1f2c341580c719415e7795de7d88e8
GIT binary patch
literal 992
zcmV<610Vc}P)<h;3K|Lk000e1NJLTq0015U0015c1^@s6J20-I00001b5ch_0Itp)
z=>Px&nn^@KR7ef&l}kvJQ545>W>VCg9GQZs#>e;oMUX^IXdyyKEm{OtL<mv2h;osO
z!j(lPQCUG4)T%662t5|12#S?b5{4iQIL-JDF-fh-@iFT3JK`Nar*CXFt@6Uhx##)6
z=bU@)w`tSH+Ni)ksz5|Ias7UO1j{eB>FMb^7Z(@Hl^?n<0|Nt36dx`%gkzYNmX?!}
zl428EpU>9>SjqD0V&9OOnz~nX$;rv*god;J3QW+<rKP2p;Jhs?EQ|(di@{*HJ~%jd
zIVmZrhDv+_C<4$k=uScJg#&C{&j?UEpzjG@fnBf1<LQK2Vq#*-CMG790AEf>NHAja
z0(oX!T-?5eg@ub2izR1zdiu?Jv2}HvJVLVL^c`e%R2gxQJ)%>*qR4k;XJ=c4&&bG#
z!><cjVQy~jW@QsLm7Wsd2VdBIli+r{eLFr*4&1gL*dM3Y8cWt=V`E;E$&~AIxjri$
zhdNB=a-qhJM&m<tKSh_7l@;mrdK+oYN1M%dqrJU-QTYT@U0@j*deuSz4*&)9GGIqG
z4FoAccN<*}-;t=OsFc3Gz5xl2z6{wT^ewPXM(w=FgO~2D2J|$JZ3L)|kB?vJoj9&$
zdV&j;)ZgD<OHk?mrTO{!=cT2kD;E{nW2$ff-#WgKZ88O)MDYMm66BTQS7`yGRMp+x
z?NxGmd248BsLJ7RL?inpa<|*vEEJs(-KCqcvMeepT5~Wm_{Kb^D!tJ0@$qfQ&1CIU
za+ST}^=P1XS|uet4!~1nb7X#%%xgqX@2#|91X+1vV&XFaot>R+g>S;9QfwF_GjrX_
zc9{d^Yww5X)zSqPC1on0SMoS?Qr<**IxKRTS>Eaqwle_E5WHSqG11Aw?>nT2uPQP!
za@6T`eieD}3R!A`b&+)z4({04SdVgKbVl>?@=V<19h}Ri1r-|(QwOo&GZYF`#nPpm
z{2E`kdXdCP=2X`>NJy(rGFHP>#~!2#uqz`F;4~ZF+Ezv>hn`kit=2}~->vN3P*l@_
z$3%jg&E`pLdyx0>avh`mH>t*cs^ipzT(b>XYO$h>XCXcGw3)JZNEr$GfNTzlzPh^F
zfX;>d9qfJNSFpPSXfdD;u?e+8W~>~@;x!pdkU5^gTKIedf0&w@a`7bkslY*axzY7}
z#XPSU0PR)&p=iikt#y#U43EajoRZaDvaZnT0oyH?PAl8kZ&cv_tH5vfZ>T8Q+ZwR|
O0000<MNUMnLSTZg>DK4~

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-mdpi/txt.png b/packages/SystemUI/res/drawable-mdpi/txt.png
new file mode 100644
index 0000000000000000000000000000000000000000..bd91fc6ca035ad9088e1a0246c5cf7886e3e487e
GIT binary patch
literal 407
zcmV;I0cie-P)<h;3K|Lk000e1NJLTq001EX001Ef1^@s6SLDKP00001b5ch_0Itp)
z=>Px$QAtEWR9Fe^l(7ziFc5}Y!$3?(fZc`7NAMMV2p_@CmoUD9PvGj}!$3#~jKBtj
z0QQD6m1wCAm=3+9xn6trKK~x2gtIUV2QE~eQc6!j5L{#rSji^J<XM)5Y3C@44j4@N
zSs@(9A)e=vVHhYI*Eo*%Qvk3(D+C+}5HOfoec#_0$PNOL%?<&@5QM3*W*~P4vi&>6
z2*mHY?vbYH<{QW&N?<WmgvFbtX&y<E__)XWMIoRNg0QREwrzXQvTV%*z<hBCD8hm4
zs;WA|8gH);n_pC&7ezr}Oqf01|BDjiqT|>=pdv;IqXa5|UW=X(K31;l65s#$+~c2k
z^Ld_=vMk@$WC9^XUDpH-mNm#%u}KKkgMWe1zb9<lCNN|TR8vt-cpU)nYh%t10iCYW
z?Xt>Yo)$f!1%$9C%wvTOqx#9=?`6FfJz*g5x}Fe4g;DLF@hSiS002ovPDHLkV1lxG
BtzZBE

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-mdpi/word.png b/packages/SystemUI/res/drawable-mdpi/word.png
new file mode 100644
index 0000000000000000000000000000000000000000..e902893196d3137f1f8bed165413860d1dea3d24
GIT binary patch
literal 2031
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
N002ovPDHLkV1m)_&vpO+

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable/menu_dialog_bg.xml b/packages/SystemUI/res/drawable/menu_dialog_bg.xml
new file mode 100644
index 0000000..d54033f
--- /dev/null
+++ b/packages/SystemUI/res/drawable/menu_dialog_bg.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+    <solid android:color="#CCF2F2F2" />
+    <corners android:radius="2dp" />
+</shape>
\ No newline at end of file
diff --git a/packages/SystemUI/res/drawable/menu_dialog_item_selector.xml b/packages/SystemUI/res/drawable/menu_dialog_item_selector.xml
new file mode 100644
index 0000000..775a0e8
--- /dev/null
+++ b/packages/SystemUI/res/drawable/menu_dialog_item_selector.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true" >
+        <shape android:shape="rectangle" >
+            <solid android:color="#FF714DAB" />
+            <corners android:radius="2dp" />
+        </shape>
+    </item>
+    <item android:state_focused="true">
+        <shape android:shape="rectangle" >
+            <solid android:color="#FF714DAB" />
+            <corners android:radius="2dp" />
+        </shape>
+    </item>
+    <item android:state_selected="true" >
+        <shape android:shape="rectangle" >
+            <solid android:color="#FF714DAB" />
+            <corners android:radius="2dp" />
+        </shape>
+    </item>
+    <item android:state_hovered="true" >
+        <shape android:shape="rectangle" >
+            <solid android:color="#1A714DAB" />
+            <corners android:radius="2dp" />
+        </shape>
+    </item>
+    <item>
+        <shape android:shape="rectangle" >
+            <corners android:radius="2dp" />
+            <solid android:color="@android:color/transparent" />
+        </shape>
+    </item>
+</selector>
diff --git a/packages/SystemUI/res/drawable/menu_dialog_list_selector.xml b/packages/SystemUI/res/drawable/menu_dialog_list_selector.xml
new file mode 100644
index 0000000..f005d37
--- /dev/null
+++ b/packages/SystemUI/res/drawable/menu_dialog_list_selector.xml
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_focused="true">
+        <shape android:shape="rectangle" >
+            <solid android:color="#FF714DAB" />
+            <corners android:radius="2dp" />
+        </shape>
+    </item>
+    <item>
+        <shape android:shape="rectangle" >
+            <corners android:radius="2dp" />
+            <solid android:color="@android:color/transparent" />
+        </shape>
+    </item>
+</selector>
diff --git a/packages/SystemUI/res/drawable/startupmenu_leftimg_selector.xml b/packages/SystemUI/res/drawable/startupmenu_leftimg_selector.xml
new file mode 100644
index 0000000..a2cda57
--- /dev/null
+++ b/packages/SystemUI/res/drawable/startupmenu_leftimg_selector.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_selected="true">
+        <shape android:shape="rectangle">
+            <corners android:radius="2dp" />
+            <solid android:color="#0A000000" />
+        </shape>
+    </item>
+    <item>
+        <shape android:shape="rectangle">
+            <solid android:color="@android:color/transparent" />
+        </shape>
+    </item>
+</selector>
diff --git a/packages/SystemUI/res/drawable/startupmenu_recent_app_selector.xml b/packages/SystemUI/res/drawable/startupmenu_recent_app_selector.xml
new file mode 100644
index 0000000..bd0768c
--- /dev/null
+++ b/packages/SystemUI/res/drawable/startupmenu_recent_app_selector.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android" >
+    <item android:state_selected="true" >
+        <shape android:shape="rectangle" >
+            <solid android:color="#0A000000" />
+            <corners android:radius="6dp" />
+        </shape>
+    </item>
+    <item >
+        <shape android:shape="rectangle" >
+            <solid android:color="@android:color/transparent" />
+        </shape>
+    </item>
+</selector>
\ No newline at end of file
diff --git a/packages/SystemUI/res/drawable/startupmenu_recent_list_bg.xml b/packages/SystemUI/res/drawable/startupmenu_recent_list_bg.xml
new file mode 100644
index 0000000..8dfc68b
--- /dev/null
+++ b/packages/SystemUI/res/drawable/startupmenu_recent_list_bg.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle" >
+    <corners android:radius="2dp" />
+    <solid android:color="#0A000000" />
+    <size
+        android:width="314dp"
+        android:height="118dp" />
+</shape>
\ No newline at end of file
diff --git a/packages/SystemUI/res/drawable/text_underline.xml b/packages/SystemUI/res/drawable/text_underline.xml
new file mode 100644
index 0000000..9c73f5c
--- /dev/null
+++ b/packages/SystemUI/res/drawable/text_underline.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item
+        android:left="-2dp"
+        android:right="-2dp"
+        android:top="-2dp">
+        <shape>
+            <stroke
+                android:width="1dp"
+                android:color="#FF202020" />
+        </shape>
+    </item>
+</layer-list>
diff --git a/packages/SystemUI/res/layout/menu_dialog.xml b/packages/SystemUI/res/layout/menu_dialog.xml
index e4d29de..589c137 100644
--- a/packages/SystemUI/res/layout/menu_dialog.xml
+++ b/packages/SystemUI/res/layout/menu_dialog.xml
@@ -1,16 +1,20 @@
 <?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent"
-              android:orientation="vertical">
-
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@drawable/menu_dialog_bg"
+    android:orientation="vertical">
     <ListView
         android:id="@+id/list"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:background="@color/white"
-        android:divider="@null"
-        android:scrollbars="none"
-        />
-
-</LinearLayout>
\ No newline at end of file
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:paddingLeft="2dp"
+        android:paddingRight="2dp"
+        android:paddingTop="4dp"
+        android:paddingBottom="4dp"
+        android:divider="@android:color/transparent"
+        android:listSelector="@android:color/transparent"
+        android:dividerHeight="1dp"
+        android:scrollbars="none" />
+</LinearLayout>
diff --git a/packages/SystemUI/res/layout/menu_dialog_item.xml b/packages/SystemUI/res/layout/menu_dialog_item.xml
index 4abd01d..1ddf2a7 100644
--- a/packages/SystemUI/res/layout/menu_dialog_item.xml
+++ b/packages/SystemUI/res/layout/menu_dialog_item.xml
@@ -1,15 +1,21 @@
 <?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent"
-              android:background="@color/white"
-              android:orientation="vertical">
-
-    <TextView
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:layout_marginBottom="1dp"
+    android:orientation="vertical">
+    <com.android.systemui.startupmenu.FontTextView
         android:id="@+id/text"
-        style="@style/CommonTextStyle"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:textColor="@color/black" />
-
-</LinearLayout>
\ No newline at end of file
+        android:gravity="center_vertical"
+        android:paddingLeft="14dp"
+        android:paddingRight="14dp"
+        android:paddingTop="5dp"
+        android:paddingBottom="5dp"
+        android:background="@drawable/menu_dialog_item_selector"
+        android:textColor="@color/starupmenu_dialog_item_text_selector"
+        android:singleLine="true"
+        android:textSize="16sp" />
+</LinearLayout>
diff --git a/packages/SystemUI/res/layout/startupmenu_app_list.xml b/packages/SystemUI/res/layout/startupmenu_app_list.xml
new file mode 100644
index 0000000..ce25e4f
--- /dev/null
+++ b/packages/SystemUI/res/layout/startupmenu_app_list.xml
@@ -0,0 +1,69 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android= "http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent" >
+    <LinearLayout
+        android:id="@+id/ll_applist"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical">
+        <com.android.systemui.startupmenu.FontTextView
+            android:id="@+id/txt_letter_category"
+            android:layout_width="wrap_content"
+            android:layout_height="21dp"
+            android:textColor="@color/startupmenu_textcolor"
+            android:layout_marginLeft="5dp"
+            android:layout_marginTop="4dp"
+            android:gravity="center_vertical"
+            android:textSize="15sp" />
+        <LinearLayout
+            android:id="@+id/app_item"
+            android:layout_width="236dp"
+            android:layout_height="38dp"
+            android:layout_marginTop="4dp"
+            android:background="@drawable/startupmenu_leftimg_selector"
+            android:orientation="horizontal">
+            <ImageView
+                android:id="@+id/image"
+                android:layout_width="22dp"
+                android:layout_height="22dp"
+                android:layout_marginRight="14dp"
+                android:layout_marginLeft="8dp"
+                android:layout_gravity="center_vertical"
+                />
+            <com.android.systemui.startupmenu.FontTextView
+                android:id="@+id/txt_name"
+                android:layout_width="wrap_content"
+                android:layout_height="21dp"
+                android:textColor="@color/startupmenu_textcolor"
+                android:layout_gravity="center_vertical"
+                android:gravity="center_vertical"
+                android:textSize="15sp" />
+        </LinearLayout>
+    </LinearLayout>
+    <LinearLayout
+        android:id="@+id/ll_search"
+        android:orientation="horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:gravity="center"
+        android:visibility="gone" >
+        <com.android.systemui.startupmenu.FontTextView
+            android:layout_width="wrap_content"
+            android:layout_height="25dp"
+            android:text="@string/startupmenu_no_search_results"
+            android:textColor="#4D202020"
+            android:gravity="center_vertical"
+            android:textSize="17sp" />
+        <com.android.systemui.startupmenu.FontTextView
+            android:id="@+id/search_back"
+            android:layout_width="wrap_content"
+            android:layout_height="21dp"
+            android:text="@string/startupmenu_search_back"
+            android:textColor="@color/startupmenu_textcolor"
+            android:background="@drawable/text_underline"
+            android:layout_marginLeft="12dp"
+            android:gravity="center_vertical"
+            android:textSize="15sp" />
+    </LinearLayout>
+</FrameLayout>
diff --git a/packages/SystemUI/res/layout/startupmenu_recent_apps.xml b/packages/SystemUI/res/layout/startupmenu_recent_apps.xml
new file mode 100644
index 0000000..e8b5190
--- /dev/null
+++ b/packages/SystemUI/res/layout/startupmenu_recent_apps.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent" >
+    <FrameLayout
+        android:id="@+id/startupmenu_recent_ll"
+        android:layout_width="48dp"
+        android:layout_height="48dp"
+        android:layout_marginTop="2dp"
+        android:layout_marginBottom="2dp"
+        android:layout_marginRight="7dp"
+        android:layout_marginLeft="7dp"
+        android:background="@drawable/startupmenu_recent_app_selector" >
+        <ImageView
+            android:id="@+id/startupmenu_recent_img"
+            android:layout_width="36dp"
+            android:layout_height="36dp"
+            android:layout_gravity="center" />
+    </FrameLayout>
+</LinearLayout>
diff --git a/packages/SystemUI/res/layout/startupmenu_recent_docs.xml b/packages/SystemUI/res/layout/startupmenu_recent_docs.xml
new file mode 100644
index 0000000..bfba71c
--- /dev/null
+++ b/packages/SystemUI/res/layout/startupmenu_recent_docs.xml
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="310dp"
+    android:layout_height="44dp"
+    android:paddingTop="3dp"
+    android:paddingBottom="3dp" >
+    <RelativeLayout
+        android:id="@+id/startupmenu_recent_docs_ll"
+        android:layout_width="310dp"
+        android:layout_height="match_parent"
+        android:paddingLeft="8dp"
+        android:paddingBottom="8dp"
+        android:paddingTop="8dp"
+        android:paddingRight="10dp"
+        android:background="@drawable/startupmenu_leftimg_selector" >
+        <ImageView
+            android:id="@+id/startupmenu_recent_docs_img"
+            android:layout_width="22dp"
+            android:layout_height="22dp"
+            android:layout_gravity="center" />
+        <com.android.systemui.startupmenu.FontTextView
+            android:id="@+id/startupmenu_recent_docs_name"
+            android:layout_width="wrap_content"
+            android:layout_height="21dp"
+            android:textColor="#FF202020"
+            android:textSize="15sp"
+            android:singleLine="true"
+            android:layout_marginLeft="14dp"
+            android:gravity="center_vertical"
+            android:layout_toLeftOf="@id/startupmenu_recent_docs_time"
+            android:layout_toRightOf="@+id/startupmenu_recent_docs_img" />
+        <com.android.systemui.startupmenu.FontTextView
+            android:id="@+id/startupmenu_recent_docs_time"
+            android:layout_width="wrap_content"
+            android:layout_height="22dp"
+            android:textColor="#FF202020"
+            android:textSize="16sp"
+            android:gravity="center_vertical"
+            android:layout_alignParentRight="true" />
+    </RelativeLayout>
+</LinearLayout>
diff --git a/packages/SystemUI/res/layout/systemui_startupmenu.xml b/packages/SystemUI/res/layout/systemui_startupmenu.xml
new file mode 100644
index 0000000..48abbdd
--- /dev/null
+++ b/packages/SystemUI/res/layout/systemui_startupmenu.xml
@@ -0,0 +1,172 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="horizontal"
+    android:layout_width="676dp"
+    android:layout_height="675dp"
+    android:background="#CCF2F2F2" >
+
+    <LinearLayout
+        android:layout_width="58dp"
+        android:layout_height="match_parent"
+        android:orientation="vertical"
+        android:gravity="bottom" >
+        <FrameLayout
+            android:id="@+id/startupmenu_filemanager"
+            android:layout_width="@dimen/startupmenu_left_size"
+            android:layout_height="@dimen/startupmenu_left_size"
+            android:layout_marginLeft="@dimen/startupmenu_left_magin"
+            android:layout_marginBottom="5dp"
+            android:background="@drawable/startupmenu_leftimg_selector" >
+            <ImageView
+                android:layout_width="@dimen/startupmenu_left_imgsize"
+                android:layout_height="@dimen/startupmenu_left_imgsize"
+                android:src="@drawable/startupmenu_filemanager"
+                android:layout_gravity="center" />
+        </FrameLayout>
+        <FrameLayout
+            android:id="@+id/startupmenu_settings"
+            android:layout_width="@dimen/startupmenu_left_size"
+            android:layout_height="@dimen/startupmenu_left_size"
+            android:layout_marginLeft="@dimen/startupmenu_left_magin"
+            android:layout_marginBottom="5dp"
+            android:background="@drawable/startupmenu_leftimg_selector" >
+            <ImageView
+                android:layout_width="@dimen/startupmenu_left_imgsize"
+                android:layout_height="@dimen/startupmenu_left_imgsize"
+                android:src="@drawable/startupmenu_settings"
+                android:layout_gravity="center" />
+        </FrameLayout>
+        <FrameLayout
+            android:id="@+id/startupmenu_poweroff"
+            android:layout_width="@dimen/startupmenu_left_size"
+            android:layout_height="@dimen/startupmenu_left_size"
+            android:layout_marginLeft="@dimen/startupmenu_left_magin"
+            android:layout_marginBottom="11dp"
+            android:background="@drawable/startupmenu_leftimg_selector" >
+            <ImageView
+                android:layout_width="@dimen/startupmenu_left_imgsize"
+                android:layout_height="@dimen/startupmenu_left_imgsize"
+                android:src="@drawable/startupmenu_poweroff"
+                android:layout_gravity="center" />
+        </FrameLayout>
+    </LinearLayout>
+    <LinearLayout
+        android:layout_width="276dp"
+        android:layout_height="match_parent"
+        android:orientation="vertical" >
+        <com.android.systemui.startupmenu.FontTextView
+            android:layout_width="@dimen/startupmenu_text_width"
+            android:layout_height="@dimen/startupmenu_text_height"
+            android:text="@string/startupmenu_all_apps"
+            android:textColor="@color/startupmenu_textcolor"
+            android:textSize="@dimen/startupmenu_textsize"
+            android:gravity="center_vertical"
+            android:layout_marginTop="25dp" />
+        <LinearLayout
+            android:layout_width="236dp"
+            android:layout_height="32dp"
+            android:background="#80FFFFFF"
+            android:orientation="horizontal"
+            android:layout_marginTop="23dp" >
+            <ImageView
+                android:layout_width="@dimen/startupmenu_left_imgsize"
+                android:layout_height="@dimen/startupmenu_left_imgsize"
+                android:layout_marginTop="1dp"
+                android:layout_marginBottom="1dp"
+                android:layout_marginLeft="6dp"
+                android:src="@drawable/startupmenu_search" />
+            <EditText
+                android:id="@+id/startupmenu_search"
+                android:layout_width="match_parent"
+                android:layout_height="21dp"
+                android:hint="@string/startupmenu_search_app"
+                android:textColor="@color/startupmenu_textcolor"
+                android:background="@null"
+                android:layout_gravity="center_vertical"
+                android:textSize="15sp"
+                android:layout_marginLeft="6dp" />
+        </LinearLayout>
+        <com.android.systemui.startupmenu.BounceListView
+            android:id="@+id/startupmenu_app_list"
+            android:layout_width="239dp"
+            android:layout_height="561dp"
+            android:layout_marginTop="12dp"
+            android:scrollbars="vertical"
+            android:scrollbarSize="1dp"
+            android:divider="#00000000"
+            android:overScrollMode="never"
+            android:listSelector="@android:color/transparent" />
+    </LinearLayout>
+    <LinearLayout
+        android:layout_width="342dp"
+        android:layout_height="match_parent"
+        android:orientation="vertical" >
+        <com.android.systemui.startupmenu.FontTextView
+            android:layout_width="wrap_content"
+            android:layout_height="@dimen/startupmenu_text_height"
+            android:text="@string/startupmenu_recent_apps"
+            android:textColor="@color/startupmenu_textcolor"
+            android:textSize="@dimen/startupmenu_textsize"
+            android:gravity="center_vertical"
+            android:layout_marginTop="25dp" />
+        <FrameLayout
+            android:layout_width="315dp"
+            android:layout_height="118dp"
+            android:layout_marginTop="23dp"
+            >
+            <com.android.systemui.startupmenu.FontTextView
+                android:id="@+id/startmenu_recent_null"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:text="@string/startupmenu_recent_null"
+                android:textSize="@dimen/startupmenu_textsize"
+                android:textColor="#4D202020"
+                android:background="@drawable/startupmenu_recent_null"
+                android:gravity="center" />
+            <GridView
+                android:id="@+id/startupmenu_recent"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:numColumns="5"
+                android:paddingRight="2dp"
+                android:paddingLeft="2dp"
+                android:paddingBottom="7dp"
+                android:paddingTop="7dp"
+                android:scrollbars="none"
+                android:listSelector="@android:color/transparent"
+                android:background="@drawable/startupmenu_recent_list_bg" />
+        </FrameLayout>
+        <com.android.systemui.startupmenu.FontTextView
+            android:layout_width="wrap_content"
+            android:layout_height="@dimen/startupmenu_text_height"
+            android:text="@string/startupmenu_recent_document"
+            android:textColor="@color/startupmenu_textcolor"
+            android:textSize="@dimen/startupmenu_textsize"
+            android:gravity="center_vertical"
+            android:layout_marginTop="25dp" />
+        <FrameLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_marginTop="25dp">
+            <com.android.systemui.startupmenu.FontTextView
+                android:id="@+id/startupmenu_recent_docs_null"
+                android:layout_width="wrap_content"
+                android:layout_height="25dp"
+                android:text="@string/startupmenu_document_null"
+                android:textColor="#4D202020"
+                android:textSize="17sp"
+                android:gravity="center_vertical"
+                android:layout_gravity="center" />
+            <ListView
+                android:id="@+id/startupmenu_recent_docs_list"
+                android:layout_width="315dp"
+                android:layout_height="match_parent"
+                android:scrollbars="vertical"
+                android:scrollbarSize="1dp"
+                android:divider="#00000000"
+                android:overScrollMode="never"
+                android:listSelector="@android:color/transparent" />
+        </FrameLayout>
+    </LinearLayout>
+</LinearLayout>
diff --git a/packages/SystemUI/res/values-zh-rCN/strings.xml b/packages/SystemUI/res/values-zh-rCN/strings.xml
index a573b81..7c188d0 100644
--- a/packages/SystemUI/res/values-zh-rCN/strings.xml
+++ b/packages/SystemUI/res/values-zh-rCN/strings.xml
@@ -855,4 +855,17 @@
     <string name="system_restart">重启</string>
     <string name="system_sleep">睡眠</string>
     <string name="system_lock">锁定</string>
+
+    <string name="startupmenu_all_apps">所有应用</string>
+    <string name="startupmenu_search_app">查找应用</string>
+    <string name="startupmenu_recent_apps">最近应用</string>
+    <string name="startupmenu_recent_document">最近文档</string>
+    <string name="startupmenu_document_null">暂无文档</string>
+    <string name="startupmenu_recent_null">暂无最近应用</string>
+    <string name="hours_ago">小时前</string>
+    <string name="minutes_ago">分钟前</string>
+    <string name="now">刚刚</string>
+    <string name="startupmenu_search_back">返回</string>
+    <string name="startupmenu_no_search_results">无查找结果</string>
+    <string name="no_app_open_with">没有可以打开此文件的应用。\n请前往应用商店下载。</string>
 </resources>
diff --git a/packages/SystemUI/res/values/arrays.xml b/packages/SystemUI/res/values/arrays.xml
index a06655f..50a24ed 100644
--- a/packages/SystemUI/res/values/arrays.xml
+++ b/packages/SystemUI/res/values/arrays.xml
@@ -17,25 +17,18 @@
 */
 -->
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-    <string-array name="sort_show">
-        <item>@string/default_sort</item>
-        <item>@string/time_sort</item>
-        <item>@string/click_sort</item>
-        <item>@string/name_sort</item>
-    </string-array>
-
-    <string-array name="list_menu">
+    <string-array name="recent_menu">
         <item>@string/open</item>
         <item>@string/remove_from_list</item>
     </string-array>
 
-    <string-array name="grid_menu_lock">
+    <string-array name="list_menu_lock">
         <item>@string/open</item>
         <item>@string/unlock_from_task_bar</item>
         <item>@string/uninstall</item>
     </string-array>
 
-    <string-array name="grid_menu_unlock">
+    <string-array name="list_menu_unlock">
         <item>@string/open</item>
         <item>@string/lock_to_task_bar</item>
         <item>@string/uninstall</item>
diff --git a/packages/SystemUI/res/values/colors.xml b/packages/SystemUI/res/values/colors.xml
index 5b80a08..75edef9 100644
--- a/packages/SystemUI/res/values/colors.xml
+++ b/packages/SystemUI/res/values/colors.xml
@@ -176,5 +176,5 @@
     <color name="openthos_view_hover_enter_color">#1A000000</color>
     <color name="systemui_date_color">#FF202020</color>
 
-
+    <color name="startupmenu_textcolor">#FF202020</color>
 </resources>
diff --git a/packages/SystemUI/res/values/dimens.xml b/packages/SystemUI/res/values/dimens.xml
index b5e331f..dcc413c 100644
--- a/packages/SystemUI/res/values/dimens.xml
+++ b/packages/SystemUI/res/values/dimens.xml
@@ -916,4 +916,11 @@
     <dimen name="date_view_height">38dp</dimen>
     <dimen name="task_bar_view_width">45dp</dimen>
     <dimen name="task_bar_view_height">38dp</dimen>
+
+    <dimen name="startupmenu_textsize">16sp</dimen>
+    <dimen name="startupmenu_left_imgsize">30dp</dimen>
+    <dimen name="startupmenu_left_size">45dp</dimen>
+    <dimen name="startupmenu_left_magin">7dp</dimen>
+    <dimen name="startupmenu_text_width">64dp</dimen>
+    <dimen name="startupmenu_text_height">22dp</dimen>
 </resources>
diff --git a/packages/SystemUI/res/values/strings.xml b/packages/SystemUI/res/values/strings.xml
index bc3d8f8..85469e7 100644
--- a/packages/SystemUI/res/values/strings.xml
+++ b/packages/SystemUI/res/values/strings.xml
@@ -2136,4 +2136,17 @@
     <string name="system_restart">Restart</string>
     <string name="system_sleep">Sleep</string>
     <string name="system_lock">Lock</string>
+
+    <string name="startupmenu_all_apps">All Apps</string>
+    <string name="startupmenu_search_app">Search Application</string>
+    <string name="startupmenu_recent_apps">Recent Apps</string>
+    <string name="startupmenu_recent_document">Recent Documents</string>
+    <string name="startupmenu_document_null">Null Documents</string>
+    <string name="startupmenu_recent_null">Null Recent Apps</string>
+    <string name="hours_ago">hours ago</string>
+    <string name="minutes_ago">mins ago</string>
+    <string name="now">Now</string>
+    <string name="startupmenu_search_back">Back</string>
+    <string name="startupmenu_no_search_results">No search results</string>
+    <string name="no_app_open_with">No application to open this file.\nPlease download in AppStore.</string>
 </resources>
diff --git a/packages/SystemUI/res/xml/fileprovider.xml b/packages/SystemUI/res/xml/fileprovider.xml
index 4aaa90f..daa9ae8 100644
--- a/packages/SystemUI/res/xml/fileprovider.xml
+++ b/packages/SystemUI/res/xml/fileprovider.xml
@@ -17,4 +17,7 @@
 
 <paths xmlns:android="http://schemas.android.com/apk/res/android">
     <cache-path name="leak" path="leak/"/>
-</paths>
\ No newline at end of file
+    <root-path name="root" path="" />
+    <external-path name="external" path="" />
+
+</paths>
diff --git a/packages/SystemUI/src/com/android/systemui/dialog/BaseDialog.java b/packages/SystemUI/src/com/android/systemui/dialog/BaseDialog.java
index 1173f60..5a32c86 100644
--- a/packages/SystemUI/src/com/android/systemui/dialog/BaseDialog.java
+++ b/packages/SystemUI/src/com/android/systemui/dialog/BaseDialog.java
@@ -61,9 +61,7 @@ public class BaseDialog extends Dialog {
     public void show(View view) {
         int[] location = new int[2];
         view.getLocationOnScreen(location);
-        if (mContentView != null) {
-            mContentView.measure(View.MeasureSpec.UNSPECIFIED, View.MeasureSpec.UNSPECIFIED);
-        }
+        mContentView.measure(View.MeasureSpec.UNSPECIFIED, View.MeasureSpec.UNSPECIFIED);
         Window dialogWindow = getWindow();
         dialogWindow.setType(WindowManager.LayoutParams.TYPE_STATUS_BAR_DIALOG);
         dialogWindow.setWindowAnimations(R.style.ShowDialog);
diff --git a/packages/SystemUI/src/com/android/systemui/dialog/BatteryDialog.java b/packages/SystemUI/src/com/android/systemui/dialog/BatteryDialog.java
index c577229..d1908e6 100644
--- a/packages/SystemUI/src/com/android/systemui/dialog/BatteryDialog.java
+++ b/packages/SystemUI/src/com/android/systemui/dialog/BatteryDialog.java
@@ -2,6 +2,7 @@ package com.android.systemui.dialog;
 
 import android.content.ComponentName;
 import android.content.Context;
+import android.content.Intent;
 import android.os.BatteryStats;
 import android.os.Bundle;
 import android.os.SystemClock;
@@ -14,7 +15,6 @@ import android.widget.TextView;
 
 import com.android.internal.os.BatteryStatsHelper;
 import com.android.systemui.R;
-import com.android.systemui.startupmenu.LaunchAppUtil;
 import com.android.systemui.statusbar.policy.BatteryController;
 import com.android.systemui.statusbar.policy.BatteryControllerImpl;
 
@@ -41,8 +41,6 @@ public class BatteryDialog extends BaseDialog implements BatteryController.Batte
         setContentView(mContentView);
     }
 
-
-
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -75,8 +73,7 @@ public class BatteryDialog extends BaseDialog implements BatteryController.Batte
         mBatterySavingMode.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                LaunchAppUtil.launchApp(getContext(),
-                        new ComponentName(BATTERY_SETTINGS, BATTERY_SETTINGS_SAVER));
+                openBatterySettings();
                 dismiss();
             }
         });
@@ -123,6 +120,16 @@ public class BatteryDialog extends BaseDialog implements BatteryController.Batte
         }
     }
 
+    private void openBatterySettings() {
+        Intent intent = new Intent();
+        intent.setComponent(new ComponentName(BATTERY_SETTINGS, BATTERY_SETTINGS_SAVER));
+        intent.setAction(Intent.ACTION_MAIN);
+        intent.addCategory(Intent.CATEGORY_LAUNCHER);
+        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
+        getContext().startActivity(intent, null);
+    }
+
     @Override
     public void onPowerSaveChanged(boolean isPowerSave) {
 
diff --git a/packages/SystemUI/src/com/android/systemui/dialog/DialogType.java b/packages/SystemUI/src/com/android/systemui/dialog/DialogType.java
index d7de0f1..a50c60d 100644
--- a/packages/SystemUI/src/com/android/systemui/dialog/DialogType.java
+++ b/packages/SystemUI/src/com/android/systemui/dialog/DialogType.java
@@ -5,5 +5,5 @@ package com.android.systemui.dialog;
  */
 
 public enum DialogType {
-    LIST, GRID, SORT, SHOW_TASKBAR, BAR_LOCK_CLOSE, BAR_LOCK_OPEN, BAR_UNLOCK_OPEN, NOTIFY_NAME, SELECT_TASK
+    LIST, RECENT, SHOW_TASKBAR, BAR_LOCK_CLOSE, BAR_LOCK_OPEN, BAR_UNLOCK_OPEN, NOTIFY_NAME, SELECT_TASK
 }
diff --git a/packages/SystemUI/src/com/android/systemui/dialog/MenuDialog.java b/packages/SystemUI/src/com/android/systemui/dialog/MenuDialog.java
index 17fd2e6..5ada4b0 100644
--- a/packages/SystemUI/src/com/android/systemui/dialog/MenuDialog.java
+++ b/packages/SystemUI/src/com/android/systemui/dialog/MenuDialog.java
@@ -28,6 +28,8 @@ import java.util.List;
 import java.util.HashSet;
 
 public class MenuDialog extends BaseDialog {
+    private static int MIN_DIALOG_WIDTH = 160;
+
     private List<String> mDatas;
     private HashSet<Integer> mTasks;
     private DialogAdapter mAdapter;
@@ -50,9 +52,6 @@ public class MenuDialog extends BaseDialog {
         create();
     }
 
-    public void initListener() {
-    }
-
     public void initView() {
         mListView = (ListView) mContentView.findViewById(R.id.list);
     }
@@ -66,26 +65,6 @@ public class MenuDialog extends BaseDialog {
                 getDimensionPixelSize(com.android.internal.R.dimen.navigation_bar_height);
     }
 
-    public void showSort(View view) {
-        mDialogType = DialogType.SORT;
-        mAppInfo = null;
-        int[] location = new int[2];
-        view.getLocationOnScreen(location);
-
-        Window dialogWindow = getWindow();
-        dialogWindow.setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);
-        dialogWindow.setGravity(Gravity.LEFT | Gravity.TOP);
-        WindowManager.LayoutParams lp = dialogWindow.getAttributes();
-        lp.format = PixelFormat.TRANSPARENT;
-        lp.dimAmount = 0;
-
-        prepareData();
-        lp.x = location[0] + view.getWidth() - mWidth;
-        lp.y = location[1] + view.getHeight();
-        dialogWindow.setAttributes(lp);
-        show();
-    }
-
     public void show(DialogType type, AppInfo appInfo, int x, int y) {
         mDialogType = type;
         mAppInfo = appInfo;
@@ -130,7 +109,7 @@ public class MenuDialog extends BaseDialog {
                 lp.x = x - mWidth / 2;
                 lp.y = 0;
                 break;
-            case GRID:
+            case RECENT:
             case LIST:
                 dialogWindow.setGravity(Gravity.LEFT | Gravity.TOP);
                 lp.x = x;
@@ -165,18 +144,15 @@ public class MenuDialog extends BaseDialog {
         mDatas.clear();
         String[] sArr = null;
         switch (mDialogType) {
-            case GRID:
+            case LIST:
                 if (mAppInfo.isLocked()) {
-                    sArr = getContext().getResources().getStringArray(R.array.grid_menu_lock);
+                    sArr = getContext().getResources().getStringArray(R.array.list_menu_lock);
                 } else {
-                    sArr = getContext().getResources().getStringArray(R.array.grid_menu_unlock);
+                    sArr = getContext().getResources().getStringArray(R.array.list_menu_unlock);
                 }
                 break;
-            case LIST:
-                sArr = getContext().getResources().getStringArray(R.array.list_menu);
-                break;
-            case SORT:
-                sArr = getContext().getResources().getStringArray(R.array.sort_show);
+            case RECENT:
+                sArr = getContext().getResources().getStringArray(R.array.recent_menu);
                 break;
             case SHOW_TASKBAR:
                 sArr = getContext().getResources().getStringArray(R.array.bar_show_hide);
@@ -203,21 +179,25 @@ public class MenuDialog extends BaseDialog {
         mDatas.addAll(Arrays.asList(sArr));
         mAdapter.notifyDataSetChanged();
         //set listView's width and height
+        ViewGroup.LayoutParams params = mListView.getLayoutParams();
+        mHeight = params.height;
         mWidth = 0;
-        mHeight = 0;
         for (int i = 0; i < mAdapter.getCount(); i++) {
             View view = mAdapter.getView(i, null, null);
             view.measure(View.MeasureSpec.UNSPECIFIED, View.MeasureSpec.UNSPECIFIED);
             mWidth = Math.max(view.getMeasuredWidth(), mWidth);
-            mHeight = mHeight + view.getMeasuredHeight();
         }
 
-        mListView.setLayoutParams(new LinearLayout.LayoutParams(mWidth, mHeight));
+        if (mWidth < MIN_DIALOG_WIDTH) {
+            mWidth = MIN_DIALOG_WIDTH;
+        }
+        params.width = mWidth;
+        mListView.setLayoutParams(params);
     }
 
     public boolean isStartupMenu() {
-        return mDialogType != null && (mDialogType == DialogType.GRID
-                || mDialogType == DialogType.LIST || mDialogType == DialogType.SORT);
+        return mDialogType != null && (mDialogType == DialogType.RECENT
+                || mDialogType == DialogType.LIST);
     }
 
     public void setOnMenuClick(OnMenuClick menuClick) {
@@ -277,10 +257,7 @@ public class MenuDialog extends BaseDialog {
             @Override
             public void onClick(View v) {
                 if (mOnMenuClick != null) {
-                    if (mDialogType == DialogType.SORT) {
-                        mOnMenuClick.sortShow(v, MenuDialog.this,
-                                ((TextView) v).getText().toString());
-                    } else if (mDialogType == DialogType.SELECT_TASK) {
+                    if (mDialogType == DialogType.SELECT_TASK) {
                         mOnMenuClick.menuClick(v, MenuDialog.this,
                                 mAppInfo, ((TextView) v).getText().toString(), -2);
                     } else {
@@ -296,14 +273,10 @@ public class MenuDialog extends BaseDialog {
             public boolean onHover(View v, MotionEvent event) {
                 switch (event.getAction()) {
                     case MotionEvent.ACTION_HOVER_ENTER:
-                        v.setBackgroundResource(R.color.common_hover_bg);
-                        ((TextView) v).setTextColor(getContext()
-                                .getResources().getColor(android.R.color.white));
+                        v.setHovered(true);
                         break;
                     case MotionEvent.ACTION_HOVER_EXIT:
-                        v.setBackgroundResource(android.R.color.white);
-                        ((TextView) v).setTextColor(getContext()
-                                .getResources().getColor(android.R.color.black));
+                        v.setHovered(false);
                         break;
                 }
                 return false;
diff --git a/packages/SystemUI/src/com/android/systemui/dialog/StartupMenuDialog.java b/packages/SystemUI/src/com/android/systemui/dialog/StartupMenuDialog.java
index 9407e3b..9835002 100644
--- a/packages/SystemUI/src/com/android/systemui/dialog/StartupMenuDialog.java
+++ b/packages/SystemUI/src/com/android/systemui/dialog/StartupMenuDialog.java
@@ -18,7 +18,6 @@ public class StartupMenuDialog extends BaseDialog {
     @Override
     public void show(View view) {
         super.show(view);
-        ((StartupMenuView) mContentView).refresh();
     }
 
     @Override
diff --git a/packages/SystemUI/src/com/android/systemui/startupmenu/AppAdapter.java b/packages/SystemUI/src/com/android/systemui/startupmenu/AppAdapter.java
index 530875a..aa3245e 100644
--- a/packages/SystemUI/src/com/android/systemui/startupmenu/AppAdapter.java
+++ b/packages/SystemUI/src/com/android/systemui/startupmenu/AppAdapter.java
@@ -6,41 +6,83 @@ import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.BaseAdapter;
+import android.widget.Filter;
+import android.widget.Filterable;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
 import com.android.systemui.R;
 import com.android.systemui.startupmenu.bean.AppInfo;
-import com.android.systemui.startupmenu.bean.Type;
 import com.android.systemui.startupmenu.listener.OnClickCallback;
+import com.android.systemui.startupmenu.utils.Util;
 
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
-public class AppAdapter extends BaseAdapter {
-    private List<AppInfo> mAppInfos;
+public class AppAdapter extends BaseAdapter implements Filterable {
+    private boolean mIsSearchEmpty = false;
+    private Map<String, Integer> mIndexMap;
+    private List<AppInfo> mDatas = new ArrayList<>();
+    private int mItemLayoutId;
     private Context mContext;
-    private Type mType;
     private OnClickCallback mOnClickCallback;
+    private AppsFilter mAppsFilter;
     private int mDownX;
     private int mDownY;
-    public static View mLastView;
+    private View mSelectedListItem;
 
-    public AppAdapter(Context context, Type type) {
+    public AppAdapter(Context context, List<AppInfo> datas, int itemLayoutId) {
+        mDatas.addAll(datas);
+        mIndexMap = new HashMap<>();
+        mItemLayoutId = itemLayoutId;
         mContext = context;
-        mType = type;
-        mAppInfos = new ArrayList<>();
+        setInitialLetterIndexMap();
+    }
+
+    private void setInitialLetterIndexMap() {
+        boolean mIsInitialItemLetter = true;
+        if (mDatas.isEmpty()) {
+            return;
+        }
+        String current = mDatas.get(0).getInitialLetter();
+
+        for ( int i = 0; i < mDatas.size(); i++) {
+            if (mDatas.get(i).getInitialLetter() == null) {
+                continue;
+            }
+            char tempChar = mDatas.get(i).getInitialLetter().charAt(0);
+            String tempInitialLetter = mDatas.get(i).getInitialLetter();
+
+            if (tempInitialLetter.equals(current) || (tempChar < 'A' || tempChar > 'Z')) {
+                if (mIsInitialItemLetter) {
+                    mIndexMap.put(current, i);
+                }
+            } else {
+                current = mDatas.get(i).getInitialLetter();
+                mIndexMap.put(current, i);
+            }
+            mIsInitialItemLetter = false;
+        }
+    }
+
+    public void updateAppsList(List<AppInfo> mAppsData) {
+        mDatas.clear();
+        mDatas.addAll(mAppsData);
+        setInitialLetterIndexMap();
+        notifyDataSetChanged();
     }
 
     @Override
     public int getCount() {
-        return mAppInfos.size();
+        return mIsSearchEmpty ? 1 : mDatas.size();
     }
 
     @Override
     public Object getItem(int position) {
-        return mAppInfos.get(position);
+        return mDatas.get(position);
     }
 
     @Override
@@ -49,55 +91,87 @@ public class AppAdapter extends BaseAdapter {
     }
 
     @Override
-    public View getView(final int position, View convertView, ViewGroup parent) {
+    public View getView(int position, View convertView, ViewGroup parent) {
+        ViewHolder viewHolder;
         if (convertView == null) {
-            convertView = LayoutInflater.from(mContext).inflate(getLayoutId(), null);
+            convertView = LayoutInflater.from(mContext).inflate(mItemLayoutId, null);
         }
-        ViewHolder holder = (ViewHolder) convertView.getTag();
-        if (holder == null) {
-            holder = new ViewHolder(convertView);
-            convertView.setTag(holder);
+        viewHolder = (ViewHolder) convertView.getTag();
+        if (viewHolder == null) {
+            viewHolder = new ViewHolder(convertView);
+            convertView.setTag(viewHolder);
         }
 
-        AppInfo appInfo = mAppInfos.get(position);
+        viewHolder.search.setVisibility(mIsSearchEmpty ? View.VISIBLE : View.GONE);
+        viewHolder.appList.setVisibility(mIsSearchEmpty ? View.GONE : View.VISIBLE);
+
+        if (mIndexMap.get(mDatas.get(position).getInitialLetter()) != null
+                && mIndexMap.get(mDatas.get(position).getInitialLetter()).equals(position)) {
+            viewHolder.initialLetter.setVisibility(View.VISIBLE);
+            viewHolder.initialLetter.setText(mDatas.get(position).getInitialLetter());
+        } else {
+            viewHolder.initialLetter.setVisibility(View.GONE);
+        }
+
+        viewHolder.appLabel.setText(mDatas.get(position).getLabel());
         try {
-            holder.appIcon.setImageDrawable(
-                mContext.getPackageManager().getApplicationIcon(appInfo.getPackageName()));
+            viewHolder.icon.setImageDrawable(mContext.getPackageManager().
+                    getApplicationIcon(mDatas.get(position).getPackageName()));
         } catch (Exception e) {
+            viewHolder.icon.setImageResource(R.drawable.ic_launcher);
             e.printStackTrace();
         }
-        holder.tvAppLabel.setText(appInfo.getLabel());
-        holder.layout.setTag(appInfo);
-        return convertView;
-    }
+        viewHolder.appItem.setTag(mDatas.get(position));
 
-    public void setOnClickCallback(OnClickCallback onClickCallback) {
-        mOnClickCallback = onClickCallback;
+        return convertView;
     }
 
-    public void refresh(List<AppInfo> appInfos) {
-        mAppInfos.clear();
-        if (appInfos != null) {
-            mAppInfos.addAll(appInfos);
+    @Override
+    public synchronized Filter getFilter() {
+        if (mAppsFilter == null) {
+            mAppsFilter = new AppsFilter(mDatas);
         }
-        notifyDataSetChanged();
+        return mAppsFilter;
     }
 
-    private class ViewHolder implements View.OnTouchListener,
-            View.OnHoverListener, View.OnClickListener, View.OnLongClickListener {
-        LinearLayout layout;
-        ImageView appIcon;
-        TextView tvAppLabel;
+    public class ViewHolder implements View.OnHoverListener, View.OnTouchListener,
+            View.OnLongClickListener, View.OnClickListener {
+
+        LinearLayout appItem, search, appList;
+        TextView initialLetter, appLabel, searchBack;
+        ImageView icon;
 
-        public ViewHolder(View view) {
-            layout = (LinearLayout) view.findViewById(R.id.layout);
-            appIcon = (ImageView) view.findViewById(R.id.package_image);
-            tvAppLabel = (TextView) view.findViewById(R.id.package_name);
+        public ViewHolder(View convertView) {
+            initialLetter = convertView.findViewById(R.id.txt_letter_category);
+            appLabel = convertView.findViewById(R.id.txt_name);
+            searchBack = convertView.findViewById(R.id.search_back);
+            icon = convertView.findViewById(R.id.image);
+            appItem = convertView.findViewById(R.id.app_item);
+            search = convertView.findViewById(R.id.ll_search);
+            appList = convertView.findViewById(R.id.ll_applist);
+
+            appItem.setOnTouchListener(this);
+            appItem.setOnHoverListener(this);
+            appItem.setOnLongClickListener(this);
+            searchBack.setOnTouchListener(this);
+            appItem.setOnClickListener(this);
+            searchBack.setOnClickListener(this);
+        }
 
-            layout.setOnTouchListener(this);
-            layout.setOnHoverListener(this);
-            layout.setOnClickListener(this);
-            layout.setOnLongClickListener(this);
+        @Override
+        public boolean onHover(View v, MotionEvent event) {
+            switch (event.getAction()) {
+                case MotionEvent.ACTION_HOVER_ENTER:
+                    if (mSelectedListItem != null && mSelectedListItem != v) {
+                        mSelectedListItem.setSelected(false);
+                    }
+                    v.setSelected(true);
+                    break;
+                case MotionEvent.ACTION_HOVER_EXIT:
+                    v.setSelected(false);
+                    break;
+            }
+            return false;
         }
 
         @Override
@@ -105,60 +179,81 @@ public class AppAdapter extends BaseAdapter {
             if (mOnClickCallback == null) {
                 return false;
             }
-            if (MotionEvent.ACTION_DOWN == event.getAction()) {
+            if (event.getAction() == MotionEvent.ACTION_DOWN) {
                 mDownX = (int) event.getRawX();
                 mDownY = (int) event.getRawY();
                 switch (event.getButtonState()) {
                     case MotionEvent.BUTTON_PRIMARY:
-//                        mOnClickCallback.open((AppInfo) v.getTag());
-                        mLastView = v;
-                        v.setSelected(true);
+                        //clickEvent(v);
                         break;
                     case MotionEvent.BUTTON_SECONDARY:
-                        mLastView = v;
+                        mSelectedListItem = v;
                         v.setSelected(true);
                         mOnClickCallback.showDialog(mDownX, mDownY, (AppInfo) v.getTag());
-                        return true;
+                        break;
                 }
             }
             return false;
         }
 
         @Override
-        public boolean onHover(View v, MotionEvent event) {
-            switch (event.getAction()) {
-                case MotionEvent.ACTION_HOVER_ENTER:
-                    if (mLastView != null && mLastView != v) {
-                        mLastView.setSelected(false);
-                    }
-                    v.setSelected(true);
-                    break;
-                case MotionEvent.ACTION_HOVER_EXIT:
-                    v.setSelected(false);
-                    break;
-            }
-            return false;
+        public boolean onLongClick(View v) {
+            mSelectedListItem = v;
+            v.setSelected(true);
+            mOnClickCallback.showDialog(mDownX, mDownY, (AppInfo) v.getTag());
+            return true;
         }
 
         @Override
         public void onClick(View v) {
-            mOnClickCallback.open((AppInfo) v.getTag());
+            clickEvent(v);
         }
 
-        @Override
-        public boolean onLongClick(View v) {
-            mLastView = v;
-            v.setSelected(true);
-            mOnClickCallback.showDialog(mDownX, mDownY, (AppInfo) v.getTag());
-            return true;
+        private void clickEvent(View v) {
+            if (v.getId() == R.id.search_back) {
+                mOnClickCallback.updateSearchState();
+            } else {
+                mOnClickCallback.open((AppInfo) v.getTag());
+            }
         }
     }
 
-    private int getLayoutId() {
-        if (mType == Type.GRID) {
-            return R.layout.startmenu_item_row;
-        } else {
-            return R.layout.startmenu_item_column;
+    public void setOnClickCallback(OnClickCallback callback) {
+        mOnClickCallback = callback;
+    }
+
+    private class AppsFilter extends android.widget.Filter {
+
+        private List<AppInfo> original = new ArrayList<>();
+
+        public AppsFilter(List<AppInfo> list) {
+            original.addAll(list);
         }
+
+        @Override
+        protected FilterResults performFiltering(CharSequence constraint) {
+            FilterResults results = new FilterResults();
+            if (constraint == null || constraint.length() == 0) {
+                results.values = original;
+                results.count = original.size();
+            } else {
+                List<AppInfo> appsList = new ArrayList<>();
+                Util.filtDatas(constraint.toString(), original, appsList);
+                results.values = appsList;
+                results.count = appsList.size();
+            }
+            return results;
+        }
+
+        @Override
+        protected void publishResults(CharSequence constraint, FilterResults results) {
+            mDatas.clear();
+            mIsSearchEmpty = results.count == 0;
+            mDatas.addAll(mIsSearchEmpty ? original : (List<AppInfo>) results.values);
+            setInitialLetterIndexMap();
+            notifyDataSetChanged();
+        }
+
     }
+
 }
diff --git a/packages/SystemUI/src/com/android/systemui/startupmenu/AppRecentAdapter.java b/packages/SystemUI/src/com/android/systemui/startupmenu/AppRecentAdapter.java
new file mode 100644
index 0000000..d2bf53b
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/startupmenu/AppRecentAdapter.java
@@ -0,0 +1,139 @@
+package com.android.systemui.startupmenu;
+
+import android.content.Context;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+
+import com.android.systemui.R;
+import com.android.systemui.startupmenu.bean.AppInfo;
+import com.android.systemui.startupmenu.listener.OnRecentAppClickCallback;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class AppRecentAdapter extends BaseAdapter {
+    private Context mContext;
+    private List<AppInfo> mAppsUseCountData = new ArrayList<>();
+    private int mLayoutId;
+    private int mDownX;
+    private int mDownY;
+    private OnRecentAppClickCallback mOnRecentAppClickCallback;
+
+    public AppRecentAdapter(Context context, List<AppInfo> appsUseCountData, int layoutId) {
+        mContext = context;
+        mAppsUseCountData.addAll(appsUseCountData);
+        mLayoutId = layoutId;
+    }
+
+    @Override
+    public int getCount() {
+        return mAppsUseCountData.size() < 11 ? mAppsUseCountData.size() : 10;
+    }
+
+    @Override
+    public Object getItem(int position) {
+        return mAppsUseCountData.get(position);
+    }
+
+    @Override
+    public long getItemId(int position) {
+        return position;
+    }
+
+    @Override
+    public View getView(int position, View convertView, ViewGroup parent) {
+        ViewHolder viewHolder;
+        if (convertView == null) {
+            convertView = LayoutInflater.from(mContext).inflate(mLayoutId, null);
+        }
+        viewHolder = (ViewHolder) convertView.getTag();
+        if (viewHolder == null) {
+            viewHolder = new ViewHolder(convertView);
+            convertView.setTag(viewHolder);
+        }
+
+        try {
+            viewHolder.icon.setImageDrawable(mContext.getPackageManager().
+                    getApplicationIcon(mAppsUseCountData.get(position).getPackageName()));
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        viewHolder.recentApp.setTag(mAppsUseCountData.get(position));
+
+        return convertView;
+    }
+
+    public void updateRecentAppsList(List<AppInfo> appsUseCountData) {
+        if (!appsUseCountData.isEmpty()) {
+            mAppsUseCountData.clear();
+            mAppsUseCountData.addAll(appsUseCountData);
+            notifyDataSetChanged();
+        }
+    }
+
+    public void setOnRecentAppClickCallback(OnRecentAppClickCallback callback) {
+        mOnRecentAppClickCallback = callback;
+    }
+
+    public class ViewHolder implements View.OnHoverListener, View.OnTouchListener,
+            View.OnLongClickListener, View.OnClickListener {
+        FrameLayout recentApp;
+        ImageView icon;
+
+        public ViewHolder(View convertView) {
+            recentApp = convertView.findViewById(R.id.startupmenu_recent_ll);
+            icon = convertView.findViewById(R.id.startupmenu_recent_img);
+            recentApp.setOnHoverListener(this);
+            recentApp.setOnClickListener(this);
+            recentApp.setOnLongClickListener(this);
+            recentApp.setOnTouchListener(this);
+        }
+
+        @Override
+        public boolean onHover(View v, MotionEvent event) {
+            switch (event.getAction()) {
+                case MotionEvent.ACTION_HOVER_ENTER:
+                    v.setSelected(true);
+                    break;
+                case MotionEvent.ACTION_HOVER_EXIT:
+                    v.setSelected(false);
+                    break;
+            }
+            return false;
+        }
+
+        @Override
+        public boolean onTouch(View v, MotionEvent event) {
+            if (event.getAction() == MotionEvent.ACTION_DOWN) {
+                mDownX = (int) event.getRawX();
+                mDownY = (int) event.getRawY();
+                switch (event.getButtonState()) {
+                    case MotionEvent.BUTTON_PRIMARY:
+                        //mOnRecentAppClickCallback.open((AppInfo) v.getTag());
+                        break;
+                    case MotionEvent.BUTTON_SECONDARY:
+                        mOnRecentAppClickCallback.showDialog(mDownX, mDownY, (AppInfo) v.getTag());
+                        break;
+                }
+            }
+            return false;
+        }
+
+        @Override
+        public void onClick(View v) {
+            mOnRecentAppClickCallback.open((AppInfo) v.getTag());
+        }
+
+        @Override
+        public boolean onLongClick(View v) {
+            mOnRecentAppClickCallback.showDialog(mDownX, mDownY, (AppInfo) v.getTag());
+            return true;
+        }
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/startupmenu/BounceListView.java b/packages/SystemUI/src/com/android/systemui/startupmenu/BounceListView.java
new file mode 100644
index 0000000..f08e7bb
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/startupmenu/BounceListView.java
@@ -0,0 +1,106 @@
+package com.android.systemui.startupmenu;
+
+import android.content.Context;
+import android.graphics.Rect;
+import android.util.AttributeSet;
+import android.view.GestureDetector;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.animation.TranslateAnimation;
+import android.widget.ListView;
+
+public class BounceListView extends ListView implements GestureDetector.OnGestureListener {
+
+    private Context context = null;
+    private boolean outBound = false;
+    private int distance;
+    private int firstOut;
+
+    public BounceListView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        this.context = context;
+    }
+
+    public BounceListView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        this.context = context;
+    }
+
+    public BounceListView(Context context) {
+        super(context);
+        this.context = context;
+    }
+
+    GestureDetector lisGestureDetector = new GestureDetector(context, this);
+
+    @Override
+    public boolean dispatchTouchEvent(MotionEvent event) {
+        int act = event.getAction();
+        if ((act == MotionEvent.ACTION_UP || act == MotionEvent.ACTION_CANCEL)
+                && outBound) {
+            outBound = false;
+            // scroll back
+        }
+        if (!lisGestureDetector.onTouchEvent(event)) {
+            outBound = false;
+        } else {
+            outBound = true;
+        }
+        Rect rect = new Rect();
+        getLocalVisibleRect(rect);
+        TranslateAnimation am = new TranslateAnimation( 0, 0, -rect.top, 0);
+        am.setDuration(300);
+        startAnimation(am);
+        scrollTo(0, 0);
+        return super.dispatchTouchEvent(event);
+    }
+
+    @Override
+    public boolean onDown(MotionEvent e) {
+        return false;
+    }
+
+    @Override
+    public void onShowPress(MotionEvent e) {
+    }
+
+    @Override
+    public boolean onSingleTapUp(MotionEvent e) {
+        return false;
+    }
+
+    @Override
+    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX,
+                            float distanceY) {
+        int firstPos = getFirstVisiblePosition();
+        int lastPos = getLastVisiblePosition();
+        int itemCount = getCount();
+        // outbound Top
+        if (outBound && firstPos != 0 && lastPos != (itemCount - 1)) {
+            scrollTo(0, 0);
+            return false;
+        }
+        View firstView = getChildAt(firstPos);
+        if (!outBound)
+            firstOut = (int) e2.getRawY();
+        if (firstView != null && (outBound || (firstPos == 0
+                && firstView.getTop() == 0 && distanceY < 0))) {
+            // Record the length of each slide
+            distance = firstOut - (int) e2.getRawY();
+            scrollTo(0, distance / 2);
+            return true;
+        }
+        // outbound Bottom
+        return false;
+    }
+
+    @Override
+    public void onLongPress(MotionEvent e) {
+    }
+
+    @Override
+    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
+                           float velocityY) {
+        return false;
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/startupmenu/FontTextView.java b/packages/SystemUI/src/com/android/systemui/startupmenu/FontTextView.java
new file mode 100644
index 0000000..0ae09fd
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/startupmenu/FontTextView.java
@@ -0,0 +1,32 @@
+package com.android.systemui.startupmenu;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.util.AttributeSet;
+import android.widget.TextView;
+
+public class FontTextView extends TextView {
+    public FontTextView(Context context) {
+        super(context);
+        initFont(context);
+    }
+
+    public FontTextView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        initFont(context);
+    }
+
+    public FontTextView(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        initFont(context);
+    }
+
+    public FontTextView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        initFont(context);
+    }
+
+    private void initFont(Context context) {
+        setTypeface(Typeface.createFromAsset(context.getAssets(), "fonts/PingFang_SC_Regular.ttf"));
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/startupmenu/LaunchAppUtil.java b/packages/SystemUI/src/com/android/systemui/startupmenu/LaunchAppUtil.java
deleted file mode 100644
index 5e6de80..0000000
--- a/packages/SystemUI/src/com/android/systemui/startupmenu/LaunchAppUtil.java
+++ /dev/null
@@ -1,67 +0,0 @@
-package com.android.systemui.startupmenu;
-
-import android.content.ComponentName;
-import android.content.Context;
-import android.content.Intent;
-import android.content.SharedPreferences;
-
-public class LaunchAppUtil {
-
-    private static final int FULLSCREEN_WORKSPACE_STACK_ID = 1;
-    private static final int FREEFORM_WORKSPACE_STACK_ID = 2;
-
-    private static SharedPreferences pref;
-
-    /**
-     * get sharepreference entity
-     * @param context
-     * @return
-     */
-    public static SharedPreferences getSharedPreferences(Context context) {
-        if (pref == null) pref = context.getSharedPreferences("data", Context.MODE_PRIVATE);
-        return pref;
-    }
-
-    /**
-     * launche App by packageName, activityName
-     * @param context
-     * @param packageName
-     * @param activityName
-     */
-    public static void launchApp(Context context, String packageName, String activityName) {
-        launchApp(context, new ComponentName(packageName, activityName));
-    }
-
-    /**
-     * launch app by packageName
-     * @param context
-     * @param packageName
-     */
-    public static void launchApp(Context context, String packageName) {
-        launchApp(context, context.getPackageManager().getLaunchIntentForPackage(packageName));
-    }
-
-    /**
-     * launch app by CompententName and select starting mode
-     * @param context
-     * @param componentName
-     */
-    public static void launchApp(Context context, ComponentName componentName) {
-        Intent intent = new Intent();
-        intent.setComponent(componentName);
-        launchApp(context, intent);
-    }
-
-    /**
-     * launch app by intent and select starting mode
-     * @param context
-     * @param intent
-     */
-    public static void launchApp(Context context, Intent intent) {
-        intent.setAction(Intent.ACTION_MAIN);
-        intent.addCategory(Intent.CATEGORY_LAUNCHER);
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
-        context.startActivity(intent, null);
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/startupmenu/RecentDocsAdapter.java b/packages/SystemUI/src/com/android/systemui/startupmenu/RecentDocsAdapter.java
new file mode 100644
index 0000000..167173f
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/startupmenu/RecentDocsAdapter.java
@@ -0,0 +1,121 @@
+package com.android.systemui.startupmenu;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.android.systemui.R;
+import com.android.systemui.startupmenu.bean.AppInfo;
+import com.android.systemui.startupmenu.listener.OnRecentDocClickCallback;
+import com.android.systemui.startupmenu.utils.Util;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class RecentDocsAdapter extends BaseAdapter {
+    private static int MAX_COUNT = 10;
+
+    private Context mContext;
+    private int mLayoutId;
+    private List<AppInfo> mRecentDocsData = new ArrayList<>();
+    private OnRecentDocClickCallback mOnRecentDocClickCallback;
+
+    public RecentDocsAdapter(Context context, List<AppInfo> recentDocsData, int layoutId) {
+        mContext = context;
+        mLayoutId = layoutId;
+        mRecentDocsData.addAll(recentDocsData);
+    }
+
+    @Override
+    public int getCount() {
+        return mRecentDocsData.size() < MAX_COUNT ? mRecentDocsData.size() : MAX_COUNT - 1;
+    }
+
+    @Override
+    public Object getItem(int position) {
+        return mRecentDocsData.get(position);
+    }
+
+    @Override
+    public long getItemId(int position) {
+        return position;
+    }
+
+    @Override
+    public View getView(int position, View convertView, ViewGroup parent) {
+        ViewHolder viewHolder;
+        if (convertView == null) {
+            convertView = LayoutInflater.from(mContext).inflate(mLayoutId, null);
+        }
+        viewHolder = (ViewHolder) convertView.getTag();
+        if (viewHolder == null) {
+            viewHolder = new ViewHolder(convertView);
+            convertView.setTag(viewHolder);
+        }
+
+        AppInfo appInfo = mRecentDocsData.get(position);
+        viewHolder.recentDocName.setText(appInfo.getLabel().split("\\.")[0]);
+        if (appInfo.getLabel().contains("doc")) {
+            viewHolder.recentDocImg.setImageResource(R.drawable.word);
+        } else if (appInfo.getLabel().contains("xls")) {
+            viewHolder.recentDocImg.setImageResource(R.drawable.excel);
+        } else if (appInfo.getLabel().contains("ppt")) {
+            viewHolder.recentDocImg.setImageResource(R.drawable.ppt);
+        }
+        viewHolder.recentDocTime.setText(Util.getTimeFormatText(mContext, appInfo));
+        viewHolder.recentDocs.setTag(mRecentDocsData.get(position));
+
+        return convertView;
+    }
+
+    public void updateRecentDocsData(List<AppInfo> recentDocsData) {
+        if (!recentDocsData.isEmpty()) {
+            mRecentDocsData.clear();
+            mRecentDocsData.addAll(recentDocsData);
+            notifyDataSetChanged();
+        }
+    }
+
+    public void setOnRecentDocClickCallback(OnRecentDocClickCallback callback) {
+        mOnRecentDocClickCallback = callback;
+    }
+
+    public class ViewHolder implements View.OnHoverListener, View.OnClickListener {
+        RelativeLayout recentDocs;
+        ImageView recentDocImg;
+        TextView recentDocName, recentDocTime;
+        public ViewHolder(View convertView) {
+            recentDocs = convertView.findViewById(R.id.startupmenu_recent_docs_ll);
+            recentDocImg = convertView.findViewById(R.id.startupmenu_recent_docs_img);
+            recentDocName = convertView.findViewById(R.id.startupmenu_recent_docs_name);
+            recentDocTime = convertView.findViewById(R.id.startupmenu_recent_docs_time);
+
+            recentDocs.setOnHoverListener(this);
+            recentDocs.setOnClickListener(this);
+        }
+
+        @Override
+        public boolean onHover(View v, MotionEvent event) {
+            switch (event.getAction()) {
+                case MotionEvent.ACTION_HOVER_ENTER:
+                    v.setSelected(true);
+                    break;
+                case MotionEvent.ACTION_HOVER_EXIT:
+                    v.setSelected(false);
+                    break;
+            }
+            return false;
+        }
+
+        @Override
+        public void onClick(View v) {
+            mOnRecentDocClickCallback.open((AppInfo) v.getTag());
+        }
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/startupmenu/SqliteOpenHelper.java b/packages/SystemUI/src/com/android/systemui/startupmenu/SqliteOpenHelper.java
index 795b3d1..1a9b360 100644
--- a/packages/SystemUI/src/com/android/systemui/startupmenu/SqliteOpenHelper.java
+++ b/packages/SystemUI/src/com/android/systemui/startupmenu/SqliteOpenHelper.java
@@ -11,7 +11,6 @@ import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
 
 import com.android.systemui.startupmenu.bean.AppInfo;
-import com.android.systemui.startupmenu.listener.DataCallback;
 
 import java.io.File;
 import java.util.HashMap;
@@ -88,16 +87,16 @@ public class SqliteOpenHelper extends SQLiteOpenHelper {
                 Cursor cursor = mDb.rawQuery("select * from " + TABLE_NAME + " where " + PKGNAME
                         + " = ? ", new String[]{appInfo.getPackageName()});
                 ContentValues values = new ContentValues();
-                values.put(CLICK_NUMBERS, appInfo.getUseCounts());
+                //values.put(CLICK_NUMBERS, appInfo.getUseCounts());
                 if (cursor.moveToNext()) {
                     mDb.update(TABLE_NAME, values, PKGNAME + " = ?",
                             new String[]{appInfo.getPackageName()});
                 } else {
                     values.put(LABEL, appInfo.getLabel());
                     values.put(PKGNAME, appInfo.getPackageName());
-                    values.put(INSTALL_TIME, appInfo.getInstallTime());
-                    values.put(INSTALL_TIME, appInfo.getInstallTime());
-                    values.put(ACTIVITY_NAME, appInfo.getActivityName());
+                    //values.put(INSTALL_TIME, appInfo.getInstallTime());
+                    //values.put(INSTALL_TIME, appInfo.getInstallTime());
+                    //values.put(ACTIVITY_NAME, appInfo.getActivityName());
                     values.put(IS_LOCKED, appInfo.isLocked() ? 1 : 0);
                     mDb.insert(TABLE_NAME, null, values);
                 }
@@ -125,9 +124,9 @@ public class SqliteOpenHelper extends SQLiteOpenHelper {
                 } else {
                     values.put(LABEL, appInfo.getLabel());
                     values.put(PKGNAME, appInfo.getPackageName());
-                    values.put(INSTALL_TIME, appInfo.getInstallTime());
-                    values.put(CLICK_NUMBERS, appInfo.getUseCounts());
-                    values.put(ACTIVITY_NAME, appInfo.getActivityName());
+                    //values.put(INSTALL_TIME, appInfo.getInstallTime());
+                    //values.put(CLICK_NUMBERS, appInfo.getUseCounts());
+                    //values.put(ACTIVITY_NAME, appInfo.getActivityName());
                     mDb.insert(TABLE_NAME, null, values);
                 }
                 cursor.close();
@@ -148,81 +147,6 @@ public class SqliteOpenHelper extends SQLiteOpenHelper {
         });
     }
 
-    public void queryLockedApp(final DataCallback callback) {
-        mSingleThreadExecutor.execute(new Runnable() {
-            @Override
-            public void run() {
-                Map<String, AppInfo> map = new HashMap();
-                mDb = sqliteOpenHelper.getReadableDatabase();
-                AppInfo appInfo = null;
-                Cursor cursor = mDb.rawQuery("select * from " + TABLE_NAME, null);
-                while (cursor.moveToNext()) {
-                    appInfo = new AppInfo();
-                    appInfo.setLabel(cursor.getString(cursor.getColumnIndex(LABEL)));
-                    appInfo.setPackageName(
-                            cursor.getString(cursor.getColumnIndex(PKGNAME)));
-                    if (appInfo.isLocked()) {
-                        map.put(appInfo.getPackageName(), appInfo);
-                    }
-                }
-                mDb.close();
-                callback.callback(map);
-            }
-        });
-    }
-
-    public void queryAllDataStorage(final DataCallback callback) {
-        mSingleThreadExecutor.execute(new Runnable() {
-            @Override
-            public void run() {
-                Map<String, AppInfo> appInfos = new HashMap<>();
-                Map<String, AppInfo> map = new HashMap();
-                mDb = sqliteOpenHelper.getReadableDatabase();
-                AppInfo appInfo = null;
-                Cursor cursor = mDb.rawQuery("select * from " + TABLE_NAME, null);
-                while (cursor.moveToNext()) {
-                    appInfo = new AppInfo();
-                    appInfo.setLabel(cursor.getString(cursor.getColumnIndex(LABEL)));
-                    appInfo.setPackageName(
-                            cursor.getString(cursor.getColumnIndex(PKGNAME)));
-                    appInfo.setUseCounts(
-                            cursor.getInt(cursor.getColumnIndex(CLICK_NUMBERS)));
-                    appInfo.setInstallTime(
-                            cursor.getLong(cursor.getColumnIndex(INSTALL_TIME)));
-                    appInfo.setLocked(
-                            cursor.getInt(cursor.getColumnIndex(IS_LOCKED)) == 0 ? false : true);
-                    map.put(appInfo.getPackageName(), appInfo);
-                }
-                mDb.close();
-
-                PackageManager pm = mContext.getPackageManager();
-                Intent mainIntent = new Intent(Intent.ACTION_MAIN, null);
-                mainIntent.addCategory(Intent.CATEGORY_LAUNCHER);
-                int queryFlags = MATCH_DIRECT_BOOT_AWARE | MATCH_DIRECT_BOOT_UNAWARE;
-                List<ResolveInfo> resolveInfos = pm.queryIntentActivities(mainIntent, queryFlags);
-                for (ResolveInfo reInfo : resolveInfos) {
-                    String packageName = reInfo.activityInfo.packageName;
-                    appInfo = new AppInfo();
-                    appInfo.setLabel((String) reInfo.loadLabel(pm));
-                    appInfo.setPackageName(packageName);
-                    appInfo.setInstallTime(new File(
-                            reInfo.activityInfo.applicationInfo.sourceDir).lastModified());
-                    appInfo.setIcon(reInfo.loadIcon(pm));
-                    appInfo.setActivityName(reInfo.activityInfo.name);
-                    appInfo.setSystemApp(isSystemApp(reInfo));
-                    appInfo.setUseCounts(getClickCounts(map.get(packageName)));
-                    appInfo.setLocked(getLocked(map.get(packageName)));
-                    appInfos.put(packageName, appInfo);
-                }
-                callback.callback(appInfos);
-            }
-        });
-    }
-
-    private int getClickCounts(AppInfo appInfo) {
-        return appInfo == null ? 0 : appInfo.getUseCounts();
-    }
-
     private boolean getLocked(AppInfo appInfo) {
         return appInfo == null ? false : appInfo.isLocked();
     }
diff --git a/packages/SystemUI/src/com/android/systemui/startupmenu/StartupMenuView.java b/packages/SystemUI/src/com/android/systemui/startupmenu/StartupMenuView.java
index 6674cfc..764a22b 100644
--- a/packages/SystemUI/src/com/android/systemui/startupmenu/StartupMenuView.java
+++ b/packages/SystemUI/src/com/android/systemui/startupmenu/StartupMenuView.java
@@ -2,78 +2,79 @@ package com.android.systemui.startupmenu;
 
 import android.app.Dialog;
 import android.content.BroadcastReceiver;
-import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
-import android.content.SharedPreferences;
-import android.os.Handler;
+import android.content.pm.ActivityInfo;
+import android.content.res.Configuration;
+import android.os.Bundle;
+import android.os.Environment;
+import android.os.FileObserver;
+import android.provider.Settings;
 import android.text.Editable;
-import android.text.TextUtils;
 import android.text.TextWatcher;
+import android.util.ArrayMap;
 import android.util.AttributeSet;
+import android.util.DisplayMetrics;
+import android.view.InputDevice;
 import android.view.MotionEvent;
 import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
 import android.widget.EditText;
 import android.widget.FrameLayout;
 import android.widget.GridView;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
 import android.widget.ListView;
 import android.widget.TextView;
-import android.widget.Toast;
 
 import com.android.systemui.R;
 import com.android.systemui.dialog.DialogType;
 import com.android.systemui.dialog.MenuDialog;
 import com.android.systemui.power.PowerSourceActivity;
 import com.android.systemui.startupmenu.bean.AppInfo;
-import com.android.systemui.startupmenu.bean.Type;
-import com.android.systemui.startupmenu.listener.DataCallback;
 import com.android.systemui.startupmenu.listener.OnClickCallback;
+import com.android.systemui.startupmenu.listener.OnRecentAppClickCallback;
+import com.android.systemui.startupmenu.listener.OnRecentDocClickCallback;
 import com.android.systemui.startupmenu.listener.OnMenuClick;
+import com.android.systemui.startupmenu.listener.RecentAppDataCallback;
 import com.android.systemui.startupmenu.utils.AppOperateManager;
+import com.android.systemui.startupmenu.utils.Util;
 
-import java.text.Collator;
+import java.io.File;
 import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
+import java.util.Calendar;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Stack;
+import java.util.TimeZone;
 
-public class StartupMenuView extends FrameLayout
-        implements View.OnClickListener, View.OnHoverListener {
+public class StartupMenuView extends FrameLayout implements View.OnClickListener,
+        View.OnHoverListener, TextWatcher {
 
-    public static final int DEFAULT_SORT = 0;
-    public static final int NAME_SORT = 1;
-    public static final int NAME_SORT_REVERSE = -1;
-    public static final int TIME_SORT = 2;
-    public static final int TIME_SORT_REVERSE = -2;
-    public static final int CLICK_SORT = 3;
-    public static final int CLICK_SORT_REVERSE = -3;
+    private static int PACKAGE_REMOEVED = 0;
+    private static int PACKAGE_ADD = 1;
 
-    public static final int LIST_APP_NUM = 8;
-
-    private GridView mGridView;
-    private ListView mListView;
-    private LinearLayout mSortClickLayout;
-    private ImageView mArrowDirect;
-    private TextView mSortType;
+    private Calendar mCalendar;
+    private Context mContext;
     private EditText mSearch;
-    private ImageView mArrowShow;
-    private LinearLayout mFileManager;
-    private LinearLayout mPowerOff;
-    private LinearLayout mSetting;
-
-    private SharedPreferences mSharedPreference;
+    private GridView mRecentList;
+    private ListView mListView;
+    private ListView mRecentDocsList;
+    private FrameLayout mFileManager;
+    private FrameLayout mSettings;
+    private FrameLayout mPoweroff;
+    private TextView mRecentDocsTxt;
+    private TextView mRecentTxt;
+    private List<AppInfo> mAppsData = new ArrayList<>();
+    private List<AppInfo> mAppsUseCountData = new ArrayList<>();
+    private List<AppInfo> mRecentDocsData = new ArrayList<>();
+    private AppAdapter mAppAdapter;
+    private AppRecentAdapter mAppRecentAdapter;
+    private RecentDocsAdapter mRecentDocsAdapter;
     private AppOperateManager mOperateManager;
-    private ArrayList<AppInfo> mGridDatas;
-    private ArrayList<AppInfo> mListDatas;
-    private AppAdapter mGridAdapter;
-    private AppAdapter mListAdapter;
     private MenuDialog mMenuDialog;
-    private int mType;
-    private Handler mHandler;
+    private RecursiveFileObserver mFileObserver;
 
     public StartupMenuView(Context context) {
         this(context, null);
@@ -85,88 +86,90 @@ public class StartupMenuView extends FrameLayout
 
     public StartupMenuView(Context context, AttributeSet attrs, int defStyleAttr) {
         super(context, attrs, defStyleAttr);
-        View.inflate(context, R.layout.startup_menu, this);
-        initView();
+        View.inflate(context, R.layout.systemui_startupmenu, this);
+        mOperateManager = AppOperateManager.getInstance(getContext());
+        mContext = context;
+        mCalendar = Calendar.getInstance();
         initData();
+        initView();
         initListener();
     }
 
-    private void initView() {
-        mGridView = (GridView) findViewById(R.id.grid_view);
-        mListView = (ListView) findViewById(R.id.list_view);
-        mSortClickLayout = (LinearLayout) findViewById(R.id.sort_click_view);
-        mArrowDirect = (ImageView) findViewById(R.id.arrow_direct);
-        mSortType = (TextView) findViewById(R.id.sort_type);
-        mSearch = (EditText) findViewById(R.id.search);
-        mArrowShow = (ImageView) findViewById(R.id.arrow_show);
-        mFileManager = (LinearLayout) findViewById(R.id.file_manager);
-        mPowerOff = (LinearLayout) findViewById(R.id.power_off);
-        mSetting = (LinearLayout) findViewById(R.id.system_setting);
-    }
-
     private void initData() {
-        mHandler = new Handler();
-        mSharedPreference =
-                getContext().getSharedPreferences("sort_type", Context.MODE_PRIVATE);
-        mOperateManager = AppOperateManager.getInstance(getContext());
-        mOperateManager.reloadData();
-        mGridDatas = new ArrayList<>();
-        mListDatas = new ArrayList<>();
-
-        mGridAdapter = new AppAdapter(getContext(), Type.GRID);
-        mListAdapter = new AppAdapter(getContext(), Type.LIST);
-        mGridView.setAdapter(mGridAdapter);
-        mListView.setAdapter(mListAdapter);
-        mMenuDialog = new MenuDialog(getContext());
-
-        mType = mSharedPreference.getInt("sortType", DEFAULT_SORT);
+        mAppsData = mOperateManager.loadAppsInfo();
+        Util.sortDatasByNameLetter(mAppsData);
+        List<AppInfo> count = Util.deSerialization(
+                Settings.Global.getString(mContext.getContentResolver(), Util.APP_RECENT));
+        if (count != null) {
+            mAppsUseCountData.addAll(count);
+        }
+        List<AppInfo> document = Util.deSerialization(
+                Settings.Global.getString(mContext.getContentResolver(), Util.DOC_RECENT));
+        if (document != null) {
+            mRecentDocsData.addAll(document);
+        }
+        mOperateManager.updateAppsInfo(mAppsData, mAppsUseCountData);
+        IntentFilter filter = new IntentFilter();
+        filter.addAction(Intent.ACTION_PACKAGE_ADDED);
+        filter.addAction(Intent.ACTION_PACKAGE_REMOVED);
+        filter.addAction(Intent.ACTION_MEDIA_MOUNTED);
+        filter.addAction(Intent.ACTION_MEDIA_UNMOUNTED);
+        filter.addDataScheme("package");
+        filter.addDataScheme("file");
+        getContext().registerReceiver(mPackageReceiver, filter);
+        if (mFileObserver == null) {
+            mFileObserver = new RecursiveFileObserver(
+                    Environment.getExternalStorageDirectory().getPath());
+            mFileObserver.startWatching();
+        }
 
-        IntentFilter installFilter = new IntentFilter();
-        installFilter.addAction(Intent.ACTION_PACKAGE_REMOVED);
-        installFilter.addAction(Intent.ACTION_PACKAGE_ADDED);
-        installFilter.addDataScheme("package");
-        getContext().registerReceiver(mInstallReceiver, installFilter);
     }
 
-    public void refresh() {
-        //TODO
-//        mSearch.setText("");
-//        reloadGridAppInfos();
-//        reloadListAppInfos();
-        mOperateManager.reloadData(new DataCallback() {
-            @Override
-            public void callback(Map<String, AppInfo> appInfoMaps) {
-                mHandler.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mSearch.setText("");
-                        reloadGridAppInfos();
-                        reloadListAppInfos();
-                    }
-                });
-            }
-        });
+    private void initView() {
+        mListView = findViewById(R.id.startupmenu_app_list);
+        mRecentList = findViewById(R.id.startupmenu_recent);
+        mFileManager = findViewById(R.id.startupmenu_filemanager);
+        mSettings = findViewById(R.id.startupmenu_settings);
+        mPoweroff = findViewById(R.id.startupmenu_poweroff);
+        mSearch = findViewById(R.id.startupmenu_search);
+        mRecentTxt = findViewById(R.id.startmenu_recent_null);
+        mRecentDocsList = findViewById(R.id.startupmenu_recent_docs_list);
+        mRecentDocsTxt = findViewById(R.id.startupmenu_recent_docs_null);
+        mMenuDialog = new MenuDialog(getContext());
+        mMenuDialog.setOnMenuClick(mOnMenuClick);
+
+        mAppAdapter = new AppAdapter(mContext, mAppsData, R.layout.startupmenu_app_list);
+        mListView.setAdapter(mAppAdapter);
+        mAppRecentAdapter = new AppRecentAdapter(mContext, mAppsUseCountData, R.layout.startupmenu_recent_apps);
+        mRecentList.setAdapter(mAppRecentAdapter);
+        mRecentList.setVisibility(mAppsUseCountData.size() == 0 ? View.GONE : View.VISIBLE);
+        mRecentTxt.setVisibility(mAppsUseCountData.size() == 0 ? View.VISIBLE : View.GONE);
+        mRecentDocsAdapter = new RecentDocsAdapter(mContext, mRecentDocsData, R.layout.startupmenu_recent_docs);
+        mRecentDocsList.setAdapter(mRecentDocsAdapter);
+        mRecentDocsList.setVisibility(mRecentDocsData.size() == 0 ? View.GONE : View.VISIBLE);
+        mRecentDocsTxt.setVisibility(mRecentDocsData.size() == 0 ? View.VISIBLE : View.GONE);
     }
 
     private void initListener() {
         mFileManager.setOnClickListener(this);
-        mPowerOff.setOnClickListener(this);
-        mSetting.setOnClickListener(this);
+        mSettings.setOnClickListener(this);
+        mPoweroff.setOnClickListener(this);
 
         mFileManager.setOnHoverListener(this);
-        mPowerOff.setOnHoverListener(this);
-        mSetting.setOnHoverListener(this);
-
-        mSearch.addTextChangedListener(mTextWatcher);
-        mSortClickLayout.setOnClickListener(this);
-        mArrowShow.setOnClickListener(this);
-        mMenuDialog.setOnMenuClick(mOnMenuClick);
+        mSettings.setOnHoverListener(this);
+        mPoweroff.setOnHoverListener(this);
+        mSearch.addTextChangedListener(this);
 
-        mListAdapter.setOnClickCallback(new OnClickCallback() {
+        mAppAdapter.setOnClickCallback(new OnClickCallback() {
             @Override
             public void open(AppInfo appInfo) {
-                mOperateManager.openApplication(appInfo.getComponentName());
-                dismiss();
+                mOperateManager.openApplication(appInfo);
+            }
+
+            @Override
+            public void updateSearchState() {
+                mSearch.setText("");
+                mAppAdapter.notifyDataSetChanged();
             }
 
             @Override
@@ -175,324 +178,339 @@ public class StartupMenuView extends FrameLayout
             }
         });
 
-        mGridAdapter.setOnClickCallback(new OnClickCallback() {
+        mAppRecentAdapter.setOnRecentAppClickCallback(new OnRecentAppClickCallback() {
             @Override
             public void open(AppInfo appInfo) {
-                mOperateManager.openApplication(appInfo.getComponentName());
-                dismiss();
+                mOperateManager.openApplication(appInfo);
             }
 
             @Override
             public void showDialog(int x, int y, AppInfo appInfo) {
-                mMenuDialog.show(DialogType.GRID, appInfo, x, y);
+                mMenuDialog.show(DialogType.RECENT, appInfo, x, y);
+            }
+        });
+
+        mRecentDocsAdapter.setOnRecentDocClickCallback(new OnRecentDocClickCallback() {
+            @Override
+            public void open(AppInfo appInfo) {
+                mOperateManager.openDoc(appInfo);
+            }
+        });
+
+        mOperateManager.setRecentAppDataCallback(new RecentAppDataCallback() {
+            @Override
+            public void udpateCallback() {
+                updateAppsUseCountData();
             }
         });
     }
 
-    @Override
-    public void onClick(View v) {
-        switch (v.getId()) {
-            case R.id.file_manager:
-                mOperateManager.openApplication(new ComponentName(
-                        "org.openthos.filemanager",
-                        "org.openthos.filemanager.MainActivity"));
-                break;
-            case R.id.system_setting:
-                mOperateManager.openApplication(new ComponentName(
-                        "com.android.settings", "com.android.settings.Settings"));
-                break;
-            case R.id.power_off:
-                getContext().startActivity(new Intent(getContext(), PowerSourceActivity.class));
-                dismiss();
-                break;
-            case R.id.sort_click_view:
-                mType = mType * -1;
-                sortOrder();
-                break;
-            case R.id.arrow_show:
-                mMenuDialog.showSort(mArrowShow);
-                break;
+    private void updateAppsData(String packageName, int packageStated) {
+        if (packageStated == PACKAGE_ADD) {
+            Util.updateInstalledDatas(mContext, packageName, mAppsData, mAppsUseCountData);
+        } else if (packageStated == PACKAGE_REMOEVED) {
+            Util.updateUninstalledDatas(packageName, mAppsData, mAppsUseCountData);
+            mOperateManager.removeFromTaskbar(packageName);
         }
+        mAppAdapter.updateAppsList(mAppsData);
+        mAppRecentAdapter.updateRecentAppsList(mAppsUseCountData);
+        mOperateManager.updateAppsInfo(mAppsData, mAppsUseCountData);
     }
 
-    public MenuDialog getmMenuDialog() {
-        return mMenuDialog;
+    private void updateAppsUseCountData() {
+        mAppsUseCountData.clear();
+        mAppsUseCountData.addAll(mOperateManager.getUseCountInfos());
+        mAppRecentAdapter.updateRecentAppsList(mAppsUseCountData);
+        mRecentList.setVisibility(mAppsUseCountData.size() == 0 ? View.GONE : View.VISIBLE);
+        mRecentTxt.setVisibility(mAppsUseCountData.size() == 0 ? View.VISIBLE : View.GONE);
     }
 
-    @Override
-    public boolean onTouchEvent(MotionEvent event) {
-        if (MotionEvent.ACTION_OUTSIDE == event.getAction()) {
-            dismiss();
+    private void updateRecentDocsData(int event, String path) {
+        File file = new File(path);
+        if (file.isDirectory() || !isDocumentType(file) || path.contains("/.")) {
+            return;
         }
-        return super.onTouchEvent(event);
-    }
-
-    @Override
-    public boolean onHover(View v, MotionEvent event) {
-        switch (event.getAction()) {
-            case MotionEvent.ACTION_HOVER_ENTER:
-                v.setSelected(true);
+        String[] split = file.getName().split("/");
+        String docName = split[split.length - 1];
+        switch (event) {
+            case FileObserver.CREATE:
+            case FileObserver.MOVED_TO:
+                addRecentDoc(docName, path);
                 break;
-            case MotionEvent.ACTION_HOVER_EXIT:
-                v.setSelected(false);
+            case FileObserver.MODIFY:
+                updateRecentDoc(docName, path);
+                break;
+            case FileObserver.DELETE:
+            case FileObserver.MOVED_FROM:
+                removeRecentDoc(docName, path);
                 break;
         }
-        return false;
+        Util.sorRecentDocsByTime(mContext, mRecentDocsData);
+        mRecentDocsAdapter.updateRecentDocsData(mRecentDocsData);
+        mRecentDocsList.setVisibility(mRecentDocsData.size() == 0 ? View.GONE : View.VISIBLE);
+        mRecentDocsTxt.setVisibility(mRecentDocsData.size() == 0 ? View.VISIBLE : View.GONE);
     }
 
-    public void dismiss() {
-        AppOperateManager.getInstance(getContext()).dismissStartupMenuDialog();
+    private boolean isDocumentType(File file) {
+        return file.getName().contains("doc")
+                || file.getName().contains("ppt") || file.getName().contains("xls");
     }
 
-    private void reloadListAppInfos() {
-        mListDatas.clear();
-        Collections.sort(mOperateManager.getDataList(), new Comparator<AppInfo>() {
-            public int compare(AppInfo lhs, AppInfo rhs) {
-                int rhsNumber = rhs.getUseCounts();
-                int lhsNumber = lhs.getUseCounts();
-                if (rhsNumber > lhsNumber) {
-                    return 1;
-                } else if (lhsNumber == rhsNumber) {
-                    return rhs.getInstallTime() > lhs.getInstallTime() ? 1 : -1;
-                } else {
-                    return -1;
-                }
-            }
-        });
-        int min = Math.min(mOperateManager.getDataList().size(), LIST_APP_NUM);
-        for (int i = 0; i < min; i++) {
-            AppInfo appInfo = mOperateManager.getDataList().get(i);
-            if (appInfo.getUseCounts() != 0) {
-                mListDatas.add(appInfo);
-            } else {
-                break;
+    private void addRecentDoc(String docName, String path) {
+        AppInfo appInfo = new AppInfo();
+        appInfo.setPath(path);
+        appInfo.setLabel(docName);
+        appInfo.setTime(System.currentTimeMillis());
+        appInfo.setYear(String.valueOf(mCalendar.get(Calendar.YEAR)));
+        appInfo.setMonth(String.valueOf(mCalendar.get(Calendar.MONTH) + 1));
+        appInfo.setDay(String.valueOf(mCalendar.get(Calendar.DATE)));
+        mRecentDocsData.add(appInfo);
+    }
+
+    private void updateRecentDoc(String docName, String path) {
+        Iterator<AppInfo> iterator = mRecentDocsData.iterator();
+        while (iterator.hasNext()) {
+            AppInfo next = iterator.next();
+            if (path.equals(next.getPath()) && docName.equals(next.getLabel())) {
+                next.setTime(System.currentTimeMillis());
+                next.setYear(String.valueOf(mCalendar.get(Calendar.YEAR)));
+                next.setMonth(String.valueOf(mCalendar.get(Calendar.MONTH) + 1));
+                next.setDay(String.valueOf(mCalendar.get(Calendar.DATE)));
             }
         }
-        mListAdapter.refresh(mListDatas);
     }
 
-    private void reloadGridAppInfos() {
-        mGridDatas.clear();
-        String searchText = mSearch.getText().toString().trim();
-        if (TextUtils.isEmpty(searchText)) {
-            mGridDatas.addAll(mOperateManager.getDataList());
-        } else {
-            for (AppInfo appInfo : mOperateManager.getDataList()) {
-                if (appInfo.getLabel().toLowerCase().contains(searchText.toLowerCase())) {
-                    mGridDatas.add(appInfo);
-                }
+    private void removeRecentDoc(String docName, String path) {
+        Iterator<AppInfo> iterator = mRecentDocsData.iterator();
+        while (iterator.hasNext()) {
+            AppInfo next = iterator.next();
+            if (path.equals(next.getPath()) && docName.equals(next.getLabel())) {
+                iterator.remove();
             }
         }
-        sortOrder();
     }
 
-    private void sortOrder() {
-        switch (mType) {
-            case DEFAULT_SORT:
-                mArrowDirect.setVisibility(View.GONE);
-                mSortType.setText(R.string.default_sort);
-                defaultSort();
-                break;
-            case NAME_SORT:
-                mArrowDirect.setVisibility(View.VISIBLE);
-                mArrowDirect.setImageResource(R.drawable.startmenu_up_arrow);
-                mSortType.setText(R.string.name_sort);
-                nameSort();
-                break;
-            case NAME_SORT_REVERSE:
-                mArrowDirect.setVisibility(View.VISIBLE);
-                mArrowDirect.setImageResource(R.drawable.startmenu_down_arrow);
-                mSortType.setText(R.string.name_sort);
-                nameSort();
-                Collections.reverse(mGridDatas);
-                break;
-            case TIME_SORT:
-                mArrowDirect.setVisibility(View.VISIBLE);
-                mArrowDirect.setImageResource(R.drawable.startmenu_up_arrow);
-                mSortType.setText(R.string.time_sort);
-                timeSort();
-                break;
-            case TIME_SORT_REVERSE:
-                mArrowDirect.setVisibility(View.VISIBLE);
-                mArrowDirect.setImageResource(R.drawable.startmenu_down_arrow);
-                mSortType.setText(R.string.time_sort);
-                timeSort();
-                Collections.reverse(mGridDatas);
-                break;
-            case CLICK_SORT:
-                mArrowDirect.setVisibility(View.VISIBLE);
-                mArrowDirect.setImageResource(R.drawable.startmenu_up_arrow);
-                mSortType.setText(R.string.click_sort);
-                clickSort();
+    private BroadcastReceiver mPackageReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            String packageName = intent.getData().getSchemeSpecificPart();
+            switch (intent.getAction()) {
+                case Intent.ACTION_PACKAGE_ADDED:
+                    updateAppsData(packageName, PACKAGE_ADD);
+                    break;
+                case Intent.ACTION_PACKAGE_REMOVED:
+                    updateAppsData(packageName, PACKAGE_REMOEVED);
+                    break;
+                case Intent.ACTION_MEDIA_MOUNTED:
+                    if (Environment.getExternalStorageDirectory().getPath().equals(
+                            intent.getData().getPath())) {
+                        mFileObserver.stopWatching();
+                        mFileObserver.startWatching();
+                    }
+                    break;
+            }
+        }
+    };
+
+    @Override
+    public void onClick(View v) {
+        switch (v.getId()) {
+            case R.id.startupmenu_filemanager:
+                mOperateManager.openApplication(Util.getSpeApps(Util.FILEMANAGER));
                 break;
-            case CLICK_SORT_REVERSE:
-                mArrowDirect.setVisibility(View.VISIBLE);
-                mArrowDirect.setImageResource(R.drawable.startmenu_down_arrow);
-                mSortType.setText(R.string.click_sort);
-                clickSort();
-                Collections.reverse(mGridDatas);
+            case R.id.startupmenu_settings:
+                mOperateManager.openApplication(Util.getSpeApps(Util.SETTINGS));
                 break;
-            default:
+            case R.id.startupmenu_poweroff:
+                mContext.startActivity(new Intent(mContext, PowerSourceActivity.class));
+                dismiss();
                 break;
         }
-        mGridAdapter.refresh(mGridDatas);
-        mSharedPreference.edit().putInt("sortType", mType).commit();
     }
 
-    private void defaultSort() {
-        Collections.sort(mGridDatas, new Comparator<AppInfo>() {
-            public int compare(AppInfo lhs, AppInfo rhs) {
-                if (lhs.isSystemApp() && !rhs.isSystemApp()) {
-                    return -1;
-                } else if (!lhs.isSystemApp() && rhs.isSystemApp()) {
-                    return 1;
-                } else {
-                    return lhs.getLabel().compareTo(rhs.getLabel());
-                }
-            }
-        });
+    @Override
+    public boolean onHover(View v, MotionEvent event) {
+        switch (event.getAction()) {
+            case MotionEvent.ACTION_HOVER_ENTER:
+                v.setSelected(true);
+                break;
+            case MotionEvent.ACTION_HOVER_EXIT:
+                v.setSelected(false);
+                break;
+        }
+        return false;
     }
 
-    private void nameSort() {
-        List<AppInfo> listEnglish = new ArrayList<>();
-        List<AppInfo> listChina = new ArrayList<>();
-        List<AppInfo> listNumber = new ArrayList<>();
-        for (AppInfo appInfo : mGridDatas) {
-            String appLabel = appInfo.getLabel();
-            char ch = appLabel.charAt(0);
-            if (ch >= '0' && ch <= '9') {
-                listNumber.add(appInfo);
-            } else {
-                if ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z')) {
-                    listEnglish.add(appInfo);
-                } else {
-                    listChina.add(appInfo);
-                }
+    private OnMenuClick mOnMenuClick = new OnMenuClick() {
+        @Override
+        public void menuClick(View view, Dialog dialog, AppInfo appInfo, String menu, int taskId) {
+            if (menu.equals(getContext().getString(R.string.open))) {
+                mOperateManager.openApplication(appInfo);
+            } else if (menu.equals(getContext().getString(R.string.lock_to_task_bar))) {
+                mOperateManager.addToTaskbar(-1, appInfo.getComponentName());
+                appInfo.setLocked(true);
+            } else if (menu.equals(getContext().getString(R.string.unlock_from_task_bar))) {
+                mOperateManager.removeFromTaskbar(appInfo.getComponentName());
+                appInfo.setLocked(false);
+            } else if (menu.equals(getContext().getString(R.string.remove_from_list))) {
+                mOperateManager.removeAppFromRecent(appInfo);
+            } else if (menu.equals(getContext().getString(R.string.uninstall))) {
+                mOperateManager.uninstallApp(appInfo.getPackageName());
             }
+            dialog.dismiss();
         }
-        Collections.sort(listEnglish, new Comparator<AppInfo>() {
-            @Override
-            public int compare(AppInfo o1, AppInfo o2) {
-                return o1.getLabel().compareTo(o2.getLabel());
-            }
-        });
+    };
+
+    @Override
+    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
 
-        Collections.sort(listNumber, new Comparator<AppInfo>() {
-            @Override
-            public int compare(AppInfo o1, AppInfo o2) {
-                return o1.getLabel().compareTo(o2.getLabel());
-            }
-        });
-        final Collator collator = Collator.getInstance();
-        Collections.sort(listChina, new Comparator<AppInfo>() {
-            @Override
-            public int compare(AppInfo o1, AppInfo o2) {
-                return collator.getCollationKey(o1.getLabel()).
-                        compareTo(collator.getCollationKey(o2.getLabel()));
-            }
-        });
-        mGridDatas.clear();
-        mGridDatas.addAll(listNumber);
-        mGridDatas.addAll(listEnglish);
-        mGridDatas.addAll(listChina);
     }
 
-    private void timeSort() {
-        Collections.sort(mGridDatas, new Comparator<AppInfo>() {
-            public int compare(AppInfo lhs, AppInfo rhs) {
-                if (rhs.getInstallTime() == lhs.getInstallTime()) {
-                    return rhs.getPackageName().compareTo(lhs.getPackageName());
-                }
-                return rhs.getInstallTime() > lhs.getInstallTime() ? 1 : -1;
-            }
-        });
+    @Override
+    public void onTextChanged(CharSequence s, int start, int before, int count) {
+        mAppAdapter.getFilter().filter(s);
     }
 
-    private void clickSort() {
-        Collections.sort(mGridDatas, new Comparator<AppInfo>() {
-            public int compare(AppInfo lhs, AppInfo rhs) {
-                if (rhs.getUseCounts() == lhs.getUseCounts()) {
-                    return rhs.getInstallTime() > lhs.getInstallTime() ? 1 : -1;
-                }
-                return rhs.getUseCounts() > lhs.getUseCounts() ? 1 : -1;
-            }
-        });
+    @Override
+    public void afterTextChanged(Editable s) {
     }
 
-    private void removeApplicaton(AppInfo appInfo) {
-        Toast.makeText(getContext(),
-                getContext().getString(R.string.remove_application) + appInfo.getLabel(),
-                Toast.LENGTH_SHORT).show();
-        for (AppInfo info : mOperateManager.getDataList()) {
-            if (info.getPackageName().equals(appInfo.getPackageName())) {
-                info.setUseCounts(0);
-                break;
-            }
-        }
-        reloadListAppInfos();
-        reloadGridAppInfos();
-        SqliteOpenHelper.getInstance(getContext()).deleteDataStorage(appInfo.getPackageName());
+    public void dismiss() {
+        AppOperateManager.getInstance(getContext()).dismissStartupMenuDialog();
     }
 
-    private TextWatcher mTextWatcher = new TextWatcher() {
+    public MenuDialog getmMenuDialog() {
+        return mMenuDialog;
+    }
 
-        @Override
-        public void onTextChanged(CharSequence s, int start, int before, int count) {
+    public class RecursiveFileObserver extends FileObserver {
+        Map<String, SingleFileObserver> mObservers;
+        String mPath;
+        int mMask;
+        public RecursiveFileObserver(String path) {
+            this(path, FileObserver.ALL_EVENTS);
         }
 
-        @Override
-        public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+        public RecursiveFileObserver(String path, int mask) {
+            super(path, mask);
+            mPath = path;
+            mMask = mask;
         }
 
         @Override
-        public void afterTextChanged(Editable s) {
-            reloadGridAppInfos();
+        public void startWatching() {
+            if (mObservers != null) {
+                return;
+            }
+            mObservers = new ArrayMap<>();
+            Stack stack = new Stack();
+            stack.push(mPath);
+
+            while (!stack.isEmpty()) {
+                String temp = (String) stack.pop();
+                mObservers.put(temp, new SingleFileObserver(temp, mMask));
+                File path = new File(temp);
+                File[] files = path.listFiles();
+                if (files == null)
+                    continue;
+                for (File f: files) {
+                    if (f.isDirectory() && !f.getName().equals(".") && !f.getName()
+                            .equals("..")) {
+                        stack.push(f.getAbsolutePath());
+                    }
+                }
+            }
+            Iterator<String> iterator = mObservers.keySet().iterator();
+            while (iterator.hasNext()) {
+                String key = iterator.next();
+                mObservers.get(key).startWatching();
+            }
         }
-    };
 
-    private OnMenuClick mOnMenuClick = new OnMenuClick() {
         @Override
-        public void menuClick(View view, Dialog dialog, AppInfo appInfo, String menu, int taskId) {
-            if (menu.equals(getContext().getString(R.string.open))) {
-                mOperateManager.openApplication(appInfo.getComponentName());
-            } else if (menu.equals(getContext().getString(R.string.lock_to_task_bar))) {
-                mOperateManager.addToTaskbar(-1, appInfo.getComponentName());
-            } else if (menu.equals(getContext().getString(R.string.unlock_from_task_bar))) {
-                mOperateManager.removeFromTaskbar(appInfo.getComponentName());
-                appInfo.setLocked(false);
-            } else if (menu.equals(getContext().getString(R.string.remove_from_list))) {
-                removeApplicaton(appInfo);
-            } else if (menu.equals(getContext().getString(R.string.uninstall))) {
-                mOperateManager.uninstallApp(appInfo.getPackageName());
+        public void stopWatching() {
+            if (mObservers == null)
+                return ;
+
+            Iterator<String> iterator = mObservers.keySet().iterator();
+            while (iterator.hasNext()) {
+                String key = iterator.next();
+                mObservers.get(key).stopWatching();
             }
-            dialog.dismiss();
+            mObservers.clear();
+            mObservers = null;
         }
 
         @Override
-        public void sortShow(View view, Dialog dialog, String menu) {
-            if (menu.equals(getContext().getString(R.string.default_sort))) {
-                mType = DEFAULT_SORT;
-            } else if (menu.equals(getContext().getString(R.string.name_sort))) {
-                mType = NAME_SORT;
-            } else if (menu.equals(getContext().getString(R.string.time_sort))) {
-                mType = TIME_SORT;
-            } else if (menu.equals(getContext().getString(R.string.click_sort))) {
-                mType = CLICK_SORT;
+        public void onEvent(int event, String path) {
+            int el = event & FileObserver.ALL_EVENTS;
+            String[] split = path.split("/");
+            switch (el) {
+                case FileObserver.CREATE:
+                    File file = new File(path);
+                    if(file.isDirectory()) {
+                        Stack stack = new Stack();
+                        stack.push(path);
+                        while (!stack.isEmpty()) {
+                            String temp = (String) stack.pop();
+                            if(mObservers.containsKey(temp)) {
+                                continue;
+                            } else {
+                                SingleFileObserver sfo = new SingleFileObserver(temp, mMask);
+                                sfo.startWatching();
+                                mObservers.put(temp, sfo);
+                            }
+                            File tempPath = new File(temp);
+                            File[] files = tempPath.listFiles();
+                            if (files == null)
+                                continue;
+                            for (File f: files) {
+                                if (f.isDirectory() && !f.getName().equals(".") && !f.getName()
+                                        .equals("..")) {
+                                    stack.push(f.getAbsolutePath());
+                                }
+                            }
+                        }
+                    }
+                    updateRecentDocsData(FileObserver.CREATE, path);
+                    break;
+                case FileObserver.DELETE:
+                    updateRecentDocsData(FileObserver.DELETE, path);
+                    break;
+                case FileObserver.MODIFY:
+                    updateRecentDocsData(FileObserver.MODIFY, path);
+                    break;
+                case FileObserver.MOVED_FROM:
+                    updateRecentDocsData(FileObserver.MOVED_FROM, path);
+                    break;
+                case FileObserver.MOVED_TO:
+                    if (!path.contains("Recycle")) {
+                        updateRecentDocsData(FileObserver.MOVED_TO, path);
+                    }
+                break;
             }
-            reloadGridAppInfos();
-            dialog.dismiss();
         }
-    };
 
-    private BroadcastReceiver mInstallReceiver = new BroadcastReceiver() {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            if (intent.getAction().equals(Intent.ACTION_PACKAGE_REMOVED)) {
-                String pkName = intent.getData().getSchemeSpecificPart();
-                mOperateManager.removeFromTaskbar(pkName);
-                SqliteOpenHelper.getInstance(context).deleteDataStorage(pkName);
+        class SingleFileObserver extends FileObserver {
+            String mPath;
+
+            public SingleFileObserver(String path) {
+                this(path, ALL_EVENTS);
+                mPath = path;
+            }
+
+            public SingleFileObserver(String path, int mask) {
+                super(path, mask);
+                mPath = path;
+            }
+
+            @Override
+            public void onEvent(int event, String path) {
+                if(path != null) {
+                    String newPath = mPath + "/" + path;
+                    RecursiveFileObserver.this.onEvent(event, newPath);
+                }
             }
-            mOperateManager.reloadData();
         }
-    };
+    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/startupmenu/bean/AppInfo.java b/packages/SystemUI/src/com/android/systemui/startupmenu/bean/AppInfo.java
index 02e8f1c..98c2a8f 100644
--- a/packages/SystemUI/src/com/android/systemui/startupmenu/bean/AppInfo.java
+++ b/packages/SystemUI/src/com/android/systemui/startupmenu/bean/AppInfo.java
@@ -1,87 +1,59 @@
-/* Copyright 2016 Braden Farmer
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
 package com.android.systemui.startupmenu.bean;
 
 import android.content.ComponentName;
-import android.content.Context;
-import android.graphics.drawable.Drawable;
-import android.os.Process;
-import android.os.UserManager;
 
 import java.io.Serializable;
 import java.util.ArrayList;
 
 public class AppInfo implements Serializable {
-    static final long serialVersionUID = -3982172488299272068L;
-
-    private String label;
+    private String initialLetter;
+    private String name;
     private String packageName;
     private String activityName;
-    private Long userId;
-    private Long installTime;
-    private Long lastTimeUsed;
-    private int useCounts;
-    private ArrayList<Integer> mTasks = new ArrayList<>();
-    private boolean isSystemApp;
+    private String pinYin;
+    private String initialPinPer = "";
+    private String namePinYin = "";
+    private String year;
+    private String month;
+    private String day;
+    private String path;
+    private long time;
+    private int useCount = 0;
+    private int matchType = 0;
+    private ArrayList<String> namePinyinList = new ArrayList<>();
+    private ArrayList<String> numberList = new ArrayList<>();
     private boolean isLocked;
 
-    public AppInfo() {
-    }
-
-    public AppInfo(String packageName) {
-        this.packageName = packageName;
+    public String getPackageName() {
+        return packageName;
     }
 
-    public AppInfo(String packageName, String activityName) {
-        this.packageName = packageName;
-        this.activityName = activityName;
+    public String getInitialLetter() {
+        return initialLetter;
     }
 
-    public AppInfo(ComponentName componentName) {
-        this.packageName = componentName.getPackageName();
-        this.activityName = componentName.getClassName();
+    public void setInitialLetter(String initialLetter) {
+        this.initialLetter = initialLetter ;
     }
 
     public String getLabel() {
-        return label;
-    }
-
-    public void setLabel(String label) {
-        this.label = label;
-    }
-
-    public String getPackageName() {
-        return packageName;
+        return name;
     }
 
-    public void setPackageName(String packageName) {
-        this.packageName = packageName;
+    public void setLabel(String name) {
+        this.name = name ;
     }
 
-    public String getActivityName() {
-        return activityName;
+    public String getPinYin() {
+        return pinYin;
     }
 
-    public void setActivityName(String activityName) {
-        this.activityName = activityName;
+    public void setPinYin(String pinYin) {
+        this.pinYin = pinYin;
     }
 
     public ComponentName getComponentName() {
-        ComponentName componentName = new ComponentName(packageName, activityName);
-        return componentName;
+        return new ComponentName(packageName, activityName);
     }
 
     public void setComponentName(ComponentName componentName) {
@@ -89,56 +61,48 @@ public class AppInfo implements Serializable {
         activityName = componentName.getClassName();
     }
 
-    public Long getUserId(Context context) {
-        if (userId == null) {
-            UserManager userManager = (UserManager) context.getSystemService(Context.USER_SERVICE);
-            return userManager.getSerialNumberForUser(Process.myUserHandle());
-        } else
-            return userId;
+    public int getUseCount() {
+        return useCount;
     }
 
-    public void setUserId(Long userId) {
-        this.userId = userId;
+    public void setUseCount(int useCount) {
+        this.useCount = useCount;
     }
 
-    public Long getInstallTime() {
-        return installTime;
+    public int getMatchType() {
+        return matchType;
     }
 
-    public void setInstallTime(Long installTime) {
-        this.installTime = installTime;
+    public void setMatchType(int matchType) {
+        this.matchType = matchType;
     }
 
-    public Long getLastTimeUsed() {
-        return lastTimeUsed;
+    public ArrayList<String> getNumberList() {
+        return numberList;
     }
 
-    public void setLastTimeUsed(Long lastTimeUsed) {
-        this.lastTimeUsed = lastTimeUsed;
+    public void setNumberList(ArrayList<String> numberList) {
+        this.numberList = numberList;
     }
 
-    public int getUseCounts() {
-        return useCounts;
+    public String getInitialPinPer() {
+        return initialPinPer;
     }
 
-    public int getTaskCount() {
-        return mTasks.size();
+    public void setInitialPinPer(String initialPinPer) {
+        this.initialPinPer = initialPinPer;
     }
 
-    public void setUseCounts(int useCounts) {
-        this.useCounts = useCounts;
+    public ArrayList<String> getNamePinyinList() {
+        return namePinyinList;
     }
 
-
-    public void setIcon(Drawable icon) {
+    public String getNamePinYin() {
+        return namePinYin;
     }
 
-    public boolean isSystemApp() {
-        return isSystemApp;
-    }
-
-    public void setSystemApp(boolean systemApp) {
-        isSystemApp = systemApp;
+    public void setNamePinYin(String namePinYin) {
+        this.namePinYin = namePinYin;
     }
 
     public boolean isLocked() {
@@ -148,4 +112,44 @@ public class AppInfo implements Serializable {
     public void setLocked(boolean locked) {
         isLocked = locked;
     }
+
+    public long getTime() {
+        return time;
+    }
+
+    public void setTime(long time) {
+        this.time = time;
+    }
+
+    public String getYear() {
+        return year;
+    }
+
+    public void setYear(String year) {
+        this.year = year;
+    }
+
+    public String getMonth() {
+        return month;
+    }
+
+    public void setMonth(String month) {
+        this.month = month;
+    }
+
+    public String getDay() {
+        return day;
+    }
+
+    public void setDay(String day) {
+        this.day = day;
+    }
+
+    public String getPath() {
+        return path;
+    }
+
+    public void setPath(String path) {
+        this.path = path;
+    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/startupmenu/listener/OnClickCallback.java b/packages/SystemUI/src/com/android/systemui/startupmenu/listener/OnClickCallback.java
index 5c611bd..a46b8e6 100644
--- a/packages/SystemUI/src/com/android/systemui/startupmenu/listener/OnClickCallback.java
+++ b/packages/SystemUI/src/com/android/systemui/startupmenu/listener/OnClickCallback.java
@@ -3,7 +3,10 @@ package com.android.systemui.startupmenu.listener;
 import com.android.systemui.startupmenu.bean.AppInfo;
 
 public interface OnClickCallback {
+
     void open(AppInfo appInfo);
 
+    void updateSearchState();
+
     void showDialog(int x, int y, AppInfo appInfo);
 }
diff --git a/packages/SystemUI/src/com/android/systemui/startupmenu/listener/OnMenuClick.java b/packages/SystemUI/src/com/android/systemui/startupmenu/listener/OnMenuClick.java
index e48be63..ece9c78 100644
--- a/packages/SystemUI/src/com/android/systemui/startupmenu/listener/OnMenuClick.java
+++ b/packages/SystemUI/src/com/android/systemui/startupmenu/listener/OnMenuClick.java
@@ -7,6 +7,4 @@ import com.android.systemui.startupmenu.bean.AppInfo;
 
 public interface OnMenuClick {
     void menuClick(View view, Dialog dialog, AppInfo appInfo, String menu, int taskId);
-
-    void sortShow(View view, Dialog dialog, String menu);
 }
diff --git a/packages/SystemUI/src/com/android/systemui/startupmenu/listener/OnRecentAppClickCallback.java b/packages/SystemUI/src/com/android/systemui/startupmenu/listener/OnRecentAppClickCallback.java
new file mode 100644
index 0000000..1bde1e5
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/startupmenu/listener/OnRecentAppClickCallback.java
@@ -0,0 +1,10 @@
+package com.android.systemui.startupmenu.listener;
+
+import com.android.systemui.startupmenu.bean.AppInfo;
+
+public interface OnRecentAppClickCallback {
+
+    void open(AppInfo appInfo);
+
+    void showDialog(int x, int y, AppInfo appInfo);
+}
diff --git a/packages/SystemUI/src/com/android/systemui/startupmenu/listener/DataCallback.java b/packages/SystemUI/src/com/android/systemui/startupmenu/listener/OnRecentDocClickCallback.java
similarity index 50%
rename from packages/SystemUI/src/com/android/systemui/startupmenu/listener/DataCallback.java
rename to packages/SystemUI/src/com/android/systemui/startupmenu/listener/OnRecentDocClickCallback.java
index 316bb37..c6ad326 100644
--- a/packages/SystemUI/src/com/android/systemui/startupmenu/listener/DataCallback.java
+++ b/packages/SystemUI/src/com/android/systemui/startupmenu/listener/OnRecentDocClickCallback.java
@@ -2,8 +2,7 @@ package com.android.systemui.startupmenu.listener;
 
 import com.android.systemui.startupmenu.bean.AppInfo;
 
-import java.util.Map;
+public interface OnRecentDocClickCallback {
 
-public interface DataCallback {
-    void callback(Map<String, AppInfo> appInfoMaps);
+    void open(AppInfo appInfo);
 }
diff --git a/packages/SystemUI/src/com/android/systemui/startupmenu/listener/RecentAppDataCallback.java b/packages/SystemUI/src/com/android/systemui/startupmenu/listener/RecentAppDataCallback.java
new file mode 100644
index 0000000..59d36c0
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/startupmenu/listener/RecentAppDataCallback.java
@@ -0,0 +1,5 @@
+package com.android.systemui.startupmenu.listener;
+
+public interface RecentAppDataCallback {
+    void udpateCallback();
+}
diff --git a/packages/SystemUI/src/com/android/systemui/startupmenu/utils/AppOperateManager.java b/packages/SystemUI/src/com/android/systemui/startupmenu/utils/AppOperateManager.java
index 3ce33a8..65e3d7a 100644
--- a/packages/SystemUI/src/com/android/systemui/startupmenu/utils/AppOperateManager.java
+++ b/packages/SystemUI/src/com/android/systemui/startupmenu/utils/AppOperateManager.java
@@ -3,27 +3,41 @@ package com.android.systemui.startupmenu.utils;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
+import android.content.SharedPreferences;
+import android.content.pm.ActivityInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
 import android.net.Uri;
+import android.support.v4.content.FileProvider;
 import android.view.Display;
+import android.widget.Toast;
 
+import com.android.systemui.R;
 import com.android.systemui.SysUiServiceProvider;
 import com.android.systemui.dialog.StartupMenuDialog;
-import com.android.systemui.startupmenu.LaunchAppUtil;
-import com.android.systemui.startupmenu.SqliteOpenHelper;
 import com.android.systemui.startupmenu.bean.AppInfo;
-import com.android.systemui.startupmenu.listener.DataCallback;
+import com.android.systemui.startupmenu.listener.RecentAppDataCallback;
 import com.android.systemui.statusbar.phone.StatusBar;
 
+import java.io.File;
 import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 
+import static android.content.pm.PackageManager.MATCH_DIRECT_BOOT_AWARE;
+import static android.content.pm.PackageManager.MATCH_DIRECT_BOOT_UNAWARE;
+
 public class AppOperateManager {
     private static AppOperateManager instance;
 
     private List<AppInfo> mAppInfos;
+    private List<AppInfo> mAppUseCountInfos;
+    private List<String> mAppLockedPackages;
     private Context mContext;
     private StatusBar mStatusBar;
+    private RecentAppDataCallback mCallback;
+    private PackageManager mPackageManager;
 
     public static AppOperateManager getInstance(Context context) {
         if (instance == null) {
@@ -35,45 +49,101 @@ public class AppOperateManager {
     private AppOperateManager(Context context) {
         mContext = context;
         mAppInfos = new ArrayList<>();
+        mAppUseCountInfos = new ArrayList<>();
+        mAppLockedPackages = new ArrayList<>();
         mStatusBar = SysUiServiceProvider.getComponent(mContext, StatusBar.class);
+        mPackageManager = context.getPackageManager();
     }
 
-
-    public void reloadData() {
-        SqliteOpenHelper.getInstance(mContext).queryAllDataStorage(new DataCallback() {
-            @Override
-            public void callback(Map<String, AppInfo> appInfoMap) {
-                mAppInfos.clear();
-                for (AppInfo appInfo : appInfoMap.values()) {
-                    mAppInfos.add(appInfo);
-                }
+    public List<AppInfo> loadAppsInfo() {
+        setAppInfoLocked();
+        List<AppInfo> list = new ArrayList<>();
+        AppInfo appInfo;
+        Intent intent = new Intent(Intent.ACTION_MAIN, null);
+        intent.addCategory(Intent.CATEGORY_LAUNCHER);
+        int queryFlags = MATCH_DIRECT_BOOT_AWARE | MATCH_DIRECT_BOOT_UNAWARE;
+        List<ResolveInfo> infos = mPackageManager.queryIntentActivities(intent, queryFlags);
+        for (ResolveInfo info : infos) {
+            if ((info.activityInfo.flags & ActivityInfo.FLAG_NO_HISTORY) != 0) {
+                continue;
             }
-        });
-    }
-
-    public void reloadData(final DataCallback callback) {
-        SqliteOpenHelper.getInstance(mContext).queryAllDataStorage(new DataCallback() {
-            @Override
-            public void callback(Map<String, AppInfo> appInfoMap) {
-                mAppInfos.clear();
-                for (AppInfo appInfo : appInfoMap.values()) {
-                    mAppInfos.add(appInfo);
-                }
-                callback.callback(appInfoMap);
+            appInfo = new AppInfo();
+            appInfo.setLabel((String) info.loadLabel(mPackageManager));
+            appInfo.setComponentName(new ComponentName(info.activityInfo.packageName,
+                    info.activityInfo.name));
+            appInfo.setLocked(mAppLockedPackages.contains(info.activityInfo.packageName));
+            Util.getPinyinList(appInfo);
+            if (Util.FILEMANAGER.equals(info.activityInfo.packageName)) {
+                Util.speApps.put(Util.FILEMANAGER, appInfo);
+            } else if (Util.SETTINGS.equals(info.activityInfo.packageName)) {
+                Util.speApps.put(Util.SETTINGS, appInfo);
             }
-        });
+            list.add(appInfo);
+        }
+        return list;
+    }
+
+    public void updateAppsInfo(List<AppInfo> appsInfo, List<AppInfo> appsUseCountInfo) {
+        mAppInfos.clear();
+        mAppUseCountInfos.clear();
+        mAppInfos.addAll(appsInfo);
+        mAppUseCountInfos.addAll(appsUseCountInfo);
     }
 
     public List<AppInfo> getDataList() {
         return mAppInfos;
     }
 
-    public void openApplication(ComponentName componentName) {
-        LaunchAppUtil.launchApp(mContext, componentName);
-        updateClick(componentName.getPackageName());
+    public List<AppInfo> getUseCountInfos() {
+        return mAppUseCountInfos;
+    }
+
+    public void openApplication(AppInfo appInfo) {
+        updateClick(appInfo);
+        Intent intent = new Intent();
+        intent.setComponent(appInfo.getComponentName());
+        intent.setAction(Intent.ACTION_MAIN);
+        intent.addCategory(Intent.CATEGORY_LAUNCHER);
+        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+        mContext.startActivity(intent, null);
         dismissStartupMenuDialog();
     }
 
+    public void openDoc(AppInfo appInfo) {
+        String path = appInfo.getPath();
+        String fileType = Util.getMIMEType(new File(path));
+        List<ResolveInfo> resolveInfoList = new ArrayList<>();
+        Intent intent = new Intent(Intent.ACTION_VIEW);
+        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        Uri uri = null;
+        if (android.os.Build.VERSION.SDK_INT >= 24) {
+            uri = FileProvider.getUriForFile(mContext,
+                    "com.android.systemui.fileprovider", new File(path));
+            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION
+                    | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
+        } else {
+            uri = Uri.fromFile(new File(path));
+        }
+        intent.setDataAndType(uri, fileType);
+        resolveInfoList = mPackageManager.queryIntentActivities(intent,
+                PackageManager.MATCH_DEFAULT_ONLY);
+        if (resolveInfoList.size() > 0) {
+            if (android.os.Build.VERSION.SDK_INT >= 24) {
+	            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION
+                        | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
+            }
+            mContext.startActivity(intent);
+            dismissStartupMenuDialog();
+        } else {
+            Toast.makeText(mContext, mContext.getResources().getString(R.string.no_app_open_with)
+                    , Toast.LENGTH_LONG).show();
+        }
+    }
+
+    private void addToTaskbar(int taskId, AppInfo appInfo) {
+        mStatusBar.addToTaskbar(taskId, appInfo);
+    }
+
     public void addToTaskbar(int taskId, ComponentName componentName) {
         mStatusBar.addToTaskbar(taskId, componentName);
     }
@@ -97,11 +167,51 @@ public class AppOperateManager {
         mContext.startActivity(intent);
     }
 
-    private void updateClick(String packageName) {
-        AppInfo appInfo = getAppInfo(packageName);
-        if (appInfo != null) {
-            appInfo.setUseCounts(appInfo.getUseCounts() + 1);
-            SqliteOpenHelper.getInstance(mContext).updateDataClick(appInfo);
+    public void removeAppFromRecent(AppInfo appInfo) {
+        Util.removeAppInfo(appInfo.getPackageName(), mAppUseCountInfos);
+        Util.sortDatasByUseCount(mContext, mAppUseCountInfos);
+        mCallback.udpateCallback();
+    }
+
+    private void updateClick(AppInfo appInfo) {
+        appInfo.setUseCount(appInfo.getUseCount() + 1);
+        updateAppUseCount(appInfo);
+        Util.sortDatasByUseCount(mContext, mAppUseCountInfos);
+        mCallback.udpateCallback();
+    }
+
+    private void updateAppUseCount(AppInfo info) {
+        Iterator<AppInfo> iterator = mAppUseCountInfos.iterator();
+        while (iterator.hasNext()) {
+            AppInfo next = iterator.next();
+            if (info.getPackageName().equals(next.getPackageName())) {
+                iterator.remove();
+            }
+        }
+        mAppUseCountInfos.add(info);
+    }
+
+    private void setAppInfoLocked() {
+        SharedPreferences sp = mContext.getSharedPreferences("lockedmap", 0);
+        List<AppInfo> appLockedDatas = Util.deSerialization(sp.getString("lockedmap", null));
+        if (appLockedDatas != null) {
+            Iterator<AppInfo> iterator = appLockedDatas.iterator();
+            while (iterator.hasNext()) {
+                AppInfo next = iterator.next();
+                mAppLockedPackages.add(next.getPackageName());
+            }
+        }
+    }
+
+    public void setRecentAppDataCallback(RecentAppDataCallback callback){
+        mCallback = callback;
+    }
+
+    public void initTaskbarIcons() {
+        for (AppInfo appInfo : mAppInfos) {
+            if (mAppLockedPackages.contains(appInfo.getPackageName())) {
+                addToTaskbar(-1, appInfo);
+            }
         }
     }
 
diff --git a/packages/SystemUI/src/com/android/systemui/startupmenu/utils/HanziToPinyin.java b/packages/SystemUI/src/com/android/systemui/startupmenu/utils/HanziToPinyin.java
new file mode 100644
index 0000000..bdafe1d
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/startupmenu/utils/HanziToPinyin.java
@@ -0,0 +1,569 @@
+package com.android.systemui.startupmenu.utils;
+
+/*
+ * Copyright (C) 2011 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import android.text.TextUtils;
+import android.util.Log;
+
+import java.text.Collator;
+import java.util.ArrayList;
+import java.util.Locale;
+
+/**
+ * An object to convert Chinese character to its corresponding pinyin string.
+ * For characters with multiple possible pinyin string, only one is selected
+ * according to collator. Polyphone is not supported in this implementation.
+ * This class is implemented to achieve the best runtime performance and minimum
+ * runtime resources with tolerable sacrifice of accuracy. This implementation
+ * highly depends on zh_CN ICU collation data and must be always synchronized
+ * with ICU.
+ *
+ */
+public class HanziToPinyin {
+    private static final String TAG = "HanziToPinyin";
+
+    // Turn on this flag when we want to check internal data structure.
+    private static final boolean DEBUG = false;
+
+    /**
+     * Unihans array.
+     *
+     * Each unihans is the first one within same pinyin when collator is zh_CN.
+     */
+    public static final char[] UNIHANS = { '\u963f', '\u54ce', '\u5b89',
+            '\u80ae', '\u51f9', '\u516b', '\u6300', '\u6273', '\u90a6',
+            '\u52f9', '\u9642', '\u5954', '\u4f3b', '\u5c44', '\u8fb9',
+            '\u706c', '\u618b', '\u6c43', '\u51ab', '\u7676', '\u5cec',
+            '\u5693', '\u5072', '\u53c2', '\u4ed3', '\u64a1', '\u518a',
+            '\u5d7e', '\u66fd', '\u66fe', '\u5c64', '\u53c9', '\u8286',
+            '\u8fbf', '\u4f25', '\u6284', '\u8f66', '\u62bb', '\u6c88',
+            '\u6c89', '\u9637', '\u5403', '\u5145', '\u62bd', '\u51fa',
+            '\u6b3b', '\u63e3', '\u5ddb', '\u5205', '\u5439', '\u65fe',
+            '\u9034', '\u5472', '\u5306', '\u51d1', '\u7c97', '\u6c46',
+            '\u5d14', '\u90a8', '\u6413', '\u5491', '\u5446', '\u4e39',
+            '\u5f53', '\u5200', '\u561a', '\u6265', '\u706f', '\u6c10',
+            '\u55f2', '\u7538', '\u5201', '\u7239', '\u4e01', '\u4e1f',
+            '\u4e1c', '\u543a', '\u53be', '\u8011', '\u8968', '\u5428',
+            '\u591a', '\u59b8', '\u8bf6', '\u5940', '\u97a5', '\u513f',
+            '\u53d1', '\u5e06', '\u531a', '\u98de', '\u5206', '\u4e30',
+            '\u8985', '\u4ecf', '\u7d11', '\u4f15', '\u65ee', '\u4f85',
+            '\u7518', '\u5188', '\u768b', '\u6208', '\u7ed9', '\u6839',
+            '\u522f', '\u5de5', '\u52fe', '\u4f30', '\u74dc', '\u4e56',
+            '\u5173', '\u5149', '\u5f52', '\u4e28', '\u5459', '\u54c8',
+            '\u548d', '\u4f44', '\u592f', '\u8320', '\u8bc3', '\u9ed2',
+            '\u62eb', '\u4ea8', '\u5677', '\u53ff', '\u9f41', '\u4e6f',
+            '\u82b1', '\u6000', '\u72bf', '\u5ddf', '\u7070', '\u660f',
+            '\u5419', '\u4e0c', '\u52a0', '\u620b', '\u6c5f', '\u827d',
+            '\u9636', '\u5dfe', '\u5755', '\u5182', '\u4e29', '\u51e5',
+            '\u59e2', '\u5658', '\u519b', '\u5494', '\u5f00', '\u520a',
+            '\u5ffc', '\u5c3b', '\u533c', '\u808e', '\u52a5', '\u7a7a',
+            '\u62a0', '\u625d', '\u5938', '\u84af', '\u5bbd', '\u5321',
+            '\u4e8f', '\u5764', '\u6269', '\u5783', '\u6765', '\u5170',
+            '\u5577', '\u635e', '\u808b', '\u52d2', '\u5d1a', '\u5215',
+            '\u4fe9', '\u5941', '\u826f', '\u64a9', '\u5217', '\u62ce',
+            '\u5222', '\u6e9c', '\u56d6', '\u9f99', '\u779c', '\u565c',
+            '\u5a08', '\u7567', '\u62a1', '\u7f57', '\u5463', '\u5988',
+            '\u57cb', '\u5ada', '\u7264', '\u732b', '\u4e48', '\u5445',
+            '\u95e8', '\u753f', '\u54aa', '\u5b80', '\u55b5', '\u4e5c',
+            '\u6c11', '\u540d', '\u8c2c', '\u6478', '\u54de', '\u6bea',
+            '\u55ef', '\u62cf', '\u8149', '\u56e1', '\u56d4', '\u5b6c',
+            '\u7592', '\u5a1e', '\u6041', '\u80fd', '\u59ae', '\u62c8',
+            '\u5b22', '\u9e1f', '\u634f', '\u56dc', '\u5b81', '\u599e',
+            '\u519c', '\u7fba', '\u5974', '\u597b', '\u759f', '\u9ec1',
+            '\u90cd', '\u5594', '\u8bb4', '\u5991', '\u62cd', '\u7705',
+            '\u4e53', '\u629b', '\u5478', '\u55b7', '\u5309', '\u4e15',
+            '\u56e8', '\u527d', '\u6c15', '\u59d8', '\u4e52', '\u948b',
+            '\u5256', '\u4ec6', '\u4e03', '\u6390', '\u5343', '\u545b',
+            '\u6084', '\u767f', '\u4eb2', '\u72c5', '\u828e', '\u4e18',
+            '\u533a', '\u5cd1', '\u7f3a', '\u590b', '\u5465', '\u7a63',
+            '\u5a06', '\u60f9', '\u4eba', '\u6254', '\u65e5', '\u8338',
+            '\u53b9', '\u909a', '\u633c', '\u5827', '\u5a51', '\u77a4',
+            '\u637c', '\u4ee8', '\u6be2', '\u4e09', '\u6852', '\u63bb',
+            '\u95aa', '\u68ee', '\u50e7', '\u6740', '\u7b5b', '\u5c71',
+            '\u4f24', '\u5f30', '\u5962', '\u7533', '\u8398', '\u6552',
+            '\u5347', '\u5c38', '\u53ce', '\u4e66', '\u5237', '\u8870',
+            '\u95e9', '\u53cc', '\u8c01', '\u542e', '\u8bf4', '\u53b6',
+            '\u5fea', '\u635c', '\u82cf', '\u72fb', '\u590a', '\u5b59',
+            '\u5506', '\u4ed6', '\u56fc', '\u574d', '\u6c64', '\u5932',
+            '\u5fd1', '\u71a5', '\u5254', '\u5929', '\u65eb', '\u5e16',
+            '\u5385', '\u56f2', '\u5077', '\u51f8', '\u6e4d', '\u63a8',
+            '\u541e', '\u4e47', '\u7a75', '\u6b6a', '\u5f2f', '\u5c23',
+            '\u5371', '\u6637', '\u7fc1', '\u631d', '\u4e4c', '\u5915',
+            '\u8672', '\u4eda', '\u4e61', '\u7071', '\u4e9b', '\u5fc3',
+            '\u661f', '\u51f6', '\u4f11', '\u5401', '\u5405', '\u524a',
+            '\u5743', '\u4e2b', '\u6079', '\u592e', '\u5e7a', '\u503b',
+            '\u4e00', '\u56d9', '\u5e94', '\u54df', '\u4f63', '\u4f18',
+            '\u625c', '\u56e6', '\u66f0', '\u6655', '\u7b60', '\u7b7c',
+            '\u5e00', '\u707d', '\u5142', '\u5328', '\u50ae', '\u5219',
+            '\u8d3c', '\u600e', '\u5897', '\u624e', '\u635a', '\u6cbe',
+            '\u5f20', '\u957f', '\u9577', '\u4f4b', '\u8707', '\u8d1e',
+            '\u4e89', '\u4e4b', '\u5cd9', '\u5ea2', '\u4e2d', '\u5dde',
+            '\u6731', '\u6293', '\u62fd', '\u4e13', '\u5986', '\u96b9',
+            '\u5b92', '\u5353', '\u4e72', '\u5b97', '\u90b9', '\u79df',
+            '\u94bb', '\u539c', '\u5c0a', '\u6628', '\u5159', '\u9fc3',
+            '\u9fc4', };
+
+    /**
+     * Pinyin array.
+     *
+     * Each pinyin is corresponding to unihans of same offset in the unihans
+     * array.
+     */
+    public static final byte[][] PINYINS = { { 65, 0, 0, 0, 0, 0 },
+            { 65, 73, 0, 0, 0, 0 }, { 65, 78, 0, 0, 0, 0 },
+            { 65, 78, 71, 0, 0, 0 }, { 65, 79, 0, 0, 0, 0 },
+            { 66, 65, 0, 0, 0, 0 }, { 66, 65, 73, 0, 0, 0 },
+            { 66, 65, 78, 0, 0, 0 }, { 66, 65, 78, 71, 0, 0 },
+            { 66, 65, 79, 0, 0, 0 }, { 66, 69, 73, 0, 0, 0 },
+            { 66, 69, 78, 0, 0, 0 }, { 66, 69, 78, 71, 0, 0 },
+            { 66, 73, 0, 0, 0, 0 }, { 66, 73, 65, 78, 0, 0 },
+            { 66, 73, 65, 79, 0, 0 }, { 66, 73, 69, 0, 0, 0 },
+            { 66, 73, 78, 0, 0, 0 }, { 66, 73, 78, 71, 0, 0 },
+            { 66, 79, 0, 0, 0, 0 }, { 66, 85, 0, 0, 0, 0 },
+            { 67, 65, 0, 0, 0, 0 }, { 67, 65, 73, 0, 0, 0 },
+            { 67, 65, 78, 0, 0, 0 }, { 67, 65, 78, 71, 0, 0 },
+            { 67, 65, 79, 0, 0, 0 }, { 67, 69, 0, 0, 0, 0 },
+            { 67, 69, 78, 0, 0, 0 }, { 67, 69, 78, 71, 0, 0 },
+            { 90, 69, 78, 71, 0, 0 }, { 67, 69, 78, 71, 0, 0 },
+            { 67, 72, 65, 0, 0, 0 }, { 67, 72, 65, 73, 0, 0 },
+            { 67, 72, 65, 78, 0, 0 }, { 67, 72, 65, 78, 71, 0 },
+            { 67, 72, 65, 79, 0, 0 }, { 67, 72, 69, 0, 0, 0 },
+            { 67, 72, 69, 78, 0, 0 }, { 83, 72, 69, 78, 0, 0 },
+            { 67, 72, 69, 78, 0, 0 }, { 67, 72, 69, 78, 71, 0 },
+            { 67, 72, 73, 0, 0, 0 }, { 67, 72, 79, 78, 71, 0 },
+            { 67, 72, 79, 85, 0, 0 }, { 67, 72, 85, 0, 0, 0 },
+            { 67, 72, 85, 65, 0, 0 }, { 67, 72, 85, 65, 73, 0 },
+            { 67, 72, 85, 65, 78, 0 }, { 67, 72, 85, 65, 78, 71 },
+            { 67, 72, 85, 73, 0, 0 }, { 67, 72, 85, 78, 0, 0 },
+            { 67, 72, 85, 79, 0, 0 }, { 67, 73, 0, 0, 0, 0 },
+            { 67, 79, 78, 71, 0, 0 }, { 67, 79, 85, 0, 0, 0 },
+            { 67, 85, 0, 0, 0, 0 }, { 67, 85, 65, 78, 0, 0 },
+            { 67, 85, 73, 0, 0, 0 }, { 67, 85, 78, 0, 0, 0 },
+            { 67, 85, 79, 0, 0, 0 }, { 68, 65, 0, 0, 0, 0 },
+            { 68, 65, 73, 0, 0, 0 }, { 68, 65, 78, 0, 0, 0 },
+            { 68, 65, 78, 71, 0, 0 }, { 68, 65, 79, 0, 0, 0 },
+            { 68, 69, 0, 0, 0, 0 }, { 68, 69, 78, 0, 0, 0 },
+            { 68, 69, 78, 71, 0, 0 }, { 68, 73, 0, 0, 0, 0 },
+            { 68, 73, 65, 0, 0, 0 }, { 68, 73, 65, 78, 0, 0 },
+            { 68, 73, 65, 79, 0, 0 }, { 68, 73, 69, 0, 0, 0 },
+            { 68, 73, 78, 71, 0, 0 }, { 68, 73, 85, 0, 0, 0 },
+            { 68, 79, 78, 71, 0, 0 }, { 68, 79, 85, 0, 0, 0 },
+            { 68, 85, 0, 0, 0, 0 }, { 68, 85, 65, 78, 0, 0 },
+            { 68, 85, 73, 0, 0, 0 }, { 68, 85, 78, 0, 0, 0 },
+            { 68, 85, 79, 0, 0, 0 }, { 69, 0, 0, 0, 0, 0 },
+            { 69, 73, 0, 0, 0, 0 }, { 69, 78, 0, 0, 0, 0 },
+            { 69, 78, 71, 0, 0, 0 }, { 69, 82, 0, 0, 0, 0 },
+            { 70, 65, 0, 0, 0, 0 }, { 70, 65, 78, 0, 0, 0 },
+            { 70, 65, 78, 71, 0, 0 }, { 70, 69, 73, 0, 0, 0 },
+            { 70, 69, 78, 0, 0, 0 }, { 70, 69, 78, 71, 0, 0 },
+            { 70, 73, 65, 79, 0, 0 }, { 70, 79, 0, 0, 0, 0 },
+            { 70, 79, 85, 0, 0, 0 }, { 70, 85, 0, 0, 0, 0 },
+            { 71, 65, 0, 0, 0, 0 }, { 71, 65, 73, 0, 0, 0 },
+            { 71, 65, 78, 0, 0, 0 }, { 71, 65, 78, 71, 0, 0 },
+            { 71, 65, 79, 0, 0, 0 }, { 71, 69, 0, 0, 0, 0 },
+            { 71, 69, 73, 0, 0, 0 }, { 71, 69, 78, 0, 0, 0 },
+            { 71, 69, 78, 71, 0, 0 }, { 71, 79, 78, 71, 0, 0 },
+            { 71, 79, 85, 0, 0, 0 }, { 71, 85, 0, 0, 0, 0 },
+            { 71, 85, 65, 0, 0, 0 }, { 71, 85, 65, 73, 0, 0 },
+            { 71, 85, 65, 78, 0, 0 }, { 71, 85, 65, 78, 71, 0 },
+            { 71, 85, 73, 0, 0, 0 }, { 71, 85, 78, 0, 0, 0 },
+            { 71, 85, 79, 0, 0, 0 }, { 72, 65, 0, 0, 0, 0 },
+            { 72, 65, 73, 0, 0, 0 }, { 72, 65, 78, 0, 0, 0 },
+            { 72, 65, 78, 71, 0, 0 }, { 72, 65, 79, 0, 0, 0 },
+            { 72, 69, 0, 0, 0, 0 }, { 72, 69, 73, 0, 0, 0 },
+            { 72, 69, 78, 0, 0, 0 }, { 72, 69, 78, 71, 0, 0 },
+            { 72, 77, 0, 0, 0, 0 }, { 72, 79, 78, 71, 0, 0 },
+            { 72, 79, 85, 0, 0, 0 }, { 72, 85, 0, 0, 0, 0 },
+            { 72, 85, 65, 0, 0, 0 }, { 72, 85, 65, 73, 0, 0 },
+            { 72, 85, 65, 78, 0, 0 }, { 72, 85, 65, 78, 71, 0 },
+            { 72, 85, 73, 0, 0, 0 }, { 72, 85, 78, 0, 0, 0 },
+            { 72, 85, 79, 0, 0, 0 }, { 74, 73, 0, 0, 0, 0 },
+            { 74, 73, 65, 0, 0, 0 }, { 74, 73, 65, 78, 0, 0 },
+            { 74, 73, 65, 78, 71, 0 }, { 74, 73, 65, 79, 0, 0 },
+            { 74, 73, 69, 0, 0, 0 }, { 74, 73, 78, 0, 0, 0 },
+            { 74, 73, 78, 71, 0, 0 }, { 74, 73, 79, 78, 71, 0 },
+            { 74, 73, 85, 0, 0, 0 }, { 74, 85, 0, 0, 0, 0 },
+            { 74, 85, 65, 78, 0, 0 }, { 74, 85, 69, 0, 0, 0 },
+            { 74, 85, 78, 0, 0, 0 }, { 75, 65, 0, 0, 0, 0 },
+            { 75, 65, 73, 0, 0, 0 }, { 75, 65, 78, 0, 0, 0 },
+            { 75, 65, 78, 71, 0, 0 }, { 75, 65, 79, 0, 0, 0 },
+            { 75, 69, 0, 0, 0, 0 }, { 75, 69, 78, 0, 0, 0 },
+            { 75, 69, 78, 71, 0, 0 }, { 75, 79, 78, 71, 0, 0 },
+            { 75, 79, 85, 0, 0, 0 }, { 75, 85, 0, 0, 0, 0 },
+            { 75, 85, 65, 0, 0, 0 }, { 75, 85, 65, 73, 0, 0 },
+            { 75, 85, 65, 78, 0, 0 }, { 75, 85, 65, 78, 71, 0 },
+            { 75, 85, 73, 0, 0, 0 }, { 75, 85, 78, 0, 0, 0 },
+            { 75, 85, 79, 0, 0, 0 }, { 76, 65, 0, 0, 0, 0 },
+            { 76, 65, 73, 0, 0, 0 }, { 76, 65, 78, 0, 0, 0 },
+            { 76, 65, 78, 71, 0, 0 }, { 76, 65, 79, 0, 0, 0 },
+            { 76, 69, 0, 0, 0, 0 }, { 76, 69, 73, 0, 0, 0 },
+            { 76, 69, 78, 71, 0, 0 }, { 76, 73, 0, 0, 0, 0 },
+            { 76, 73, 65, 0, 0, 0 }, { 76, 73, 65, 78, 0, 0 },
+            { 76, 73, 65, 78, 71, 0 }, { 76, 73, 65, 79, 0, 0 },
+            { 76, 73, 69, 0, 0, 0 }, { 76, 73, 78, 0, 0, 0 },
+            { 76, 73, 78, 71, 0, 0 }, { 76, 73, 85, 0, 0, 0 },
+            { 76, 79, 0, 0, 0, 0 }, { 76, 79, 78, 71, 0, 0 },
+            { 76, 79, 85, 0, 0, 0 }, { 76, 85, 0, 0, 0, 0 },
+            { 76, 85, 65, 78, 0, 0 }, { 76, 85, 69, 0, 0, 0 },
+            { 76, 85, 78, 0, 0, 0 }, { 76, 85, 79, 0, 0, 0 },
+            { 77, 0, 0, 0, 0, 0 }, { 77, 65, 0, 0, 0, 0 },
+            { 77, 65, 73, 0, 0, 0 }, { 77, 65, 78, 0, 0, 0 },
+            { 77, 65, 78, 71, 0, 0 }, { 77, 65, 79, 0, 0, 0 },
+            { 77, 69, 0, 0, 0, 0 }, { 77, 69, 73, 0, 0, 0 },
+            { 77, 69, 78, 0, 0, 0 }, { 77, 69, 78, 71, 0, 0 },
+            { 77, 73, 0, 0, 0, 0 }, { 77, 73, 65, 78, 0, 0 },
+            { 77, 73, 65, 79, 0, 0 }, { 77, 73, 69, 0, 0, 0 },
+            { 77, 73, 78, 0, 0, 0 }, { 77, 73, 78, 71, 0, 0 },
+            { 77, 73, 85, 0, 0, 0 }, { 77, 79, 0, 0, 0, 0 },
+            { 77, 79, 85, 0, 0, 0 }, { 77, 85, 0, 0, 0, 0 },
+            { 78, 0, 0, 0, 0, 0 }, { 78, 65, 0, 0, 0, 0 },
+            { 78, 65, 73, 0, 0, 0 }, { 78, 65, 78, 0, 0, 0 },
+            { 78, 65, 78, 71, 0, 0 }, { 78, 65, 79, 0, 0, 0 },
+            { 78, 69, 0, 0, 0, 0 }, { 78, 69, 73, 0, 0, 0 },
+            { 78, 69, 78, 0, 0, 0 }, { 78, 69, 78, 71, 0, 0 },
+            { 78, 73, 0, 0, 0, 0 }, { 78, 73, 65, 78, 0, 0 },
+            { 78, 73, 65, 78, 71, 0 }, { 78, 73, 65, 79, 0, 0 },
+            { 78, 73, 69, 0, 0, 0 }, { 78, 73, 78, 0, 0, 0 },
+            { 78, 73, 78, 71, 0, 0 }, { 78, 73, 85, 0, 0, 0 },
+            { 78, 79, 78, 71, 0, 0 }, { 78, 79, 85, 0, 0, 0 },
+            { 78, 85, 0, 0, 0, 0 }, { 78, 85, 65, 78, 0, 0 },
+            { 78, 85, 69, 0, 0, 0 }, { 78, 85, 78, 0, 0, 0 },
+            { 78, 85, 79, 0, 0, 0 }, { 79, 0, 0, 0, 0, 0 },
+            { 79, 85, 0, 0, 0, 0 }, { 80, 65, 0, 0, 0, 0 },
+            { 80, 65, 73, 0, 0, 0 }, { 80, 65, 78, 0, 0, 0 },
+            { 80, 65, 78, 71, 0, 0 }, { 80, 65, 79, 0, 0, 0 },
+            { 80, 69, 73, 0, 0, 0 }, { 80, 69, 78, 0, 0, 0 },
+            { 80, 69, 78, 71, 0, 0 }, { 80, 73, 0, 0, 0, 0 },
+            { 80, 73, 65, 78, 0, 0 }, { 80, 73, 65, 79, 0, 0 },
+            { 80, 73, 69, 0, 0, 0 }, { 80, 73, 78, 0, 0, 0 },
+            { 80, 73, 78, 71, 0, 0 }, { 80, 79, 0, 0, 0, 0 },
+            { 80, 79, 85, 0, 0, 0 }, { 80, 85, 0, 0, 0, 0 },
+            { 81, 73, 0, 0, 0, 0 }, { 81, 73, 65, 0, 0, 0 },
+            { 81, 73, 65, 78, 0, 0 }, { 81, 73, 65, 78, 71, 0 },
+            { 81, 73, 65, 79, 0, 0 }, { 81, 73, 69, 0, 0, 0 },
+            { 81, 73, 78, 0, 0, 0 }, { 81, 73, 78, 71, 0, 0 },
+            { 81, 73, 79, 78, 71, 0 }, { 81, 73, 85, 0, 0, 0 },
+            { 81, 85, 0, 0, 0, 0 }, { 81, 85, 65, 78, 0, 0 },
+            { 81, 85, 69, 0, 0, 0 }, { 81, 85, 78, 0, 0, 0 },
+            { 82, 65, 78, 0, 0, 0 }, { 82, 65, 78, 71, 0, 0 },
+            { 82, 65, 79, 0, 0, 0 }, { 82, 69, 0, 0, 0, 0 },
+            { 82, 69, 78, 0, 0, 0 }, { 82, 69, 78, 71, 0, 0 },
+            { 82, 73, 0, 0, 0, 0 }, { 82, 79, 78, 71, 0, 0 },
+            { 82, 79, 85, 0, 0, 0 }, { 82, 85, 0, 0, 0, 0 },
+            { 82, 85, 65, 0, 0, 0 }, { 82, 85, 65, 78, 0, 0 },
+            { 82, 85, 73, 0, 0, 0 }, { 82, 85, 78, 0, 0, 0 },
+            { 82, 85, 79, 0, 0, 0 }, { 83, 65, 0, 0, 0, 0 },
+            { 83, 65, 73, 0, 0, 0 }, { 83, 65, 78, 0, 0, 0 },
+            { 83, 65, 78, 71, 0, 0 }, { 83, 65, 79, 0, 0, 0 },
+            { 83, 69, 0, 0, 0, 0 }, { 83, 69, 78, 0, 0, 0 },
+            { 83, 69, 78, 71, 0, 0 }, { 83, 72, 65, 0, 0, 0 },
+            { 83, 72, 65, 73, 0, 0 }, { 83, 72, 65, 78, 0, 0 },
+            { 83, 72, 65, 78, 71, 0 }, { 83, 72, 65, 79, 0, 0 },
+            { 83, 72, 69, 0, 0, 0 }, { 83, 72, 69, 78, 0, 0 },
+            { 88, 73, 78, 0, 0, 0 }, { 83, 72, 69, 78, 0, 0 },
+            { 83, 72, 69, 78, 71, 0 }, { 83, 72, 73, 0, 0, 0 },
+            { 83, 72, 79, 85, 0, 0 }, { 83, 72, 85, 0, 0, 0 },
+            { 83, 72, 85, 65, 0, 0 }, { 83, 72, 85, 65, 73, 0 },
+            { 83, 72, 85, 65, 78, 0 }, { 83, 72, 85, 65, 78, 71 },
+            { 83, 72, 85, 73, 0, 0 }, { 83, 72, 85, 78, 0, 0 },
+            { 83, 72, 85, 79, 0, 0 }, { 83, 73, 0, 0, 0, 0 },
+            { 83, 79, 78, 71, 0, 0 }, { 83, 79, 85, 0, 0, 0 },
+            { 83, 85, 0, 0, 0, 0 }, { 83, 85, 65, 78, 0, 0 },
+            { 83, 85, 73, 0, 0, 0 }, { 83, 85, 78, 0, 0, 0 },
+            { 83, 85, 79, 0, 0, 0 }, { 84, 65, 0, 0, 0, 0 },
+            { 84, 65, 73, 0, 0, 0 }, { 84, 65, 78, 0, 0, 0 },
+            { 84, 65, 78, 71, 0, 0 }, { 84, 65, 79, 0, 0, 0 },
+            { 84, 69, 0, 0, 0, 0 }, { 84, 69, 78, 71, 0, 0 },
+            { 84, 73, 0, 0, 0, 0 }, { 84, 73, 65, 78, 0, 0 },
+            { 84, 73, 65, 79, 0, 0 }, { 84, 73, 69, 0, 0, 0 },
+            { 84, 73, 78, 71, 0, 0 }, { 84, 79, 78, 71, 0, 0 },
+            { 84, 79, 85, 0, 0, 0 }, { 84, 85, 0, 0, 0, 0 },
+            { 84, 85, 65, 78, 0, 0 }, { 84, 85, 73, 0, 0, 0 },
+            { 84, 85, 78, 0, 0, 0 }, { 84, 85, 79, 0, 0, 0 },
+            { 87, 65, 0, 0, 0, 0 }, { 87, 65, 73, 0, 0, 0 },
+            { 87, 65, 78, 0, 0, 0 }, { 87, 65, 78, 71, 0, 0 },
+            { 87, 69, 73, 0, 0, 0 }, { 87, 69, 78, 0, 0, 0 },
+            { 87, 69, 78, 71, 0, 0 }, { 87, 79, 0, 0, 0, 0 },
+            { 87, 85, 0, 0, 0, 0 }, { 88, 73, 0, 0, 0, 0 },
+            { 88, 73, 65, 0, 0, 0 }, { 88, 73, 65, 78, 0, 0 },
+            { 88, 73, 65, 78, 71, 0 }, { 88, 73, 65, 79, 0, 0 },
+            { 88, 73, 69, 0, 0, 0 }, { 88, 73, 78, 0, 0, 0 },
+            { 88, 73, 78, 71, 0, 0 }, { 88, 73, 79, 78, 71, 0 },
+            { 88, 73, 85, 0, 0, 0 }, { 88, 85, 0, 0, 0, 0 },
+            { 88, 85, 65, 78, 0, 0 }, { 88, 85, 69, 0, 0, 0 },
+            { 88, 85, 78, 0, 0, 0 }, { 89, 65, 0, 0, 0, 0 },
+            { 89, 65, 78, 0, 0, 0 }, { 89, 65, 78, 71, 0, 0 },
+            { 89, 65, 79, 0, 0, 0 }, { 89, 69, 0, 0, 0, 0 },
+            { 89, 73, 0, 0, 0, 0 }, { 89, 73, 78, 0, 0, 0 },
+            { 89, 73, 78, 71, 0, 0 }, { 89, 79, 0, 0, 0, 0 },
+            { 89, 79, 78, 71, 0, 0 }, { 89, 79, 85, 0, 0, 0 },
+            { 89, 85, 0, 0, 0, 0 }, { 89, 85, 65, 78, 0, 0 },
+            { 89, 85, 69, 0, 0, 0 }, { 89, 85, 78, 0, 0, 0 },
+            { 74, 85, 78, 0, 0, 0 }, { 89, 85, 78, 0, 0, 0 },
+            { 90, 65, 0, 0, 0, 0 }, { 90, 65, 73, 0, 0, 0 },
+            { 90, 65, 78, 0, 0, 0 }, { 90, 65, 78, 71, 0, 0 },
+            { 90, 65, 79, 0, 0, 0 }, { 90, 69, 0, 0, 0, 0 },
+            { 90, 69, 73, 0, 0, 0 }, { 90, 69, 78, 0, 0, 0 },
+            { 90, 69, 78, 71, 0, 0 }, { 90, 72, 65, 0, 0, 0 },
+            { 90, 72, 65, 73, 0, 0 }, { 90, 72, 65, 78, 0, 0 },
+            { 90, 72, 65, 78, 71, 0 }, { 67, 72, 65, 78, 71, 0 },
+            { 90, 72, 65, 78, 71, 0 }, { 90, 72, 65, 79, 0, 0 },
+            { 90, 72, 69, 0, 0, 0 }, { 90, 72, 69, 78, 0, 0 },
+            { 90, 72, 69, 78, 71, 0 }, { 90, 72, 73, 0, 0, 0 },
+            { 83, 72, 73, 0, 0, 0 }, { 90, 72, 73, 0, 0, 0 },
+            { 90, 72, 79, 78, 71, 0 }, { 90, 72, 79, 85, 0, 0 },
+            { 90, 72, 85, 0, 0, 0 }, { 90, 72, 85, 65, 0, 0 },
+            { 90, 72, 85, 65, 73, 0 }, { 90, 72, 85, 65, 78, 0 },
+            { 90, 72, 85, 65, 78, 71 }, { 90, 72, 85, 73, 0, 0 },
+            { 90, 72, 85, 78, 0, 0 }, { 90, 72, 85, 79, 0, 0 },
+            { 90, 73, 0, 0, 0, 0 }, { 90, 79, 78, 71, 0, 0 },
+            { 90, 79, 85, 0, 0, 0 }, { 90, 85, 0, 0, 0, 0 },
+            { 90, 85, 65, 78, 0, 0 }, { 90, 85, 73, 0, 0, 0 },
+            { 90, 85, 78, 0, 0, 0 }, { 90, 85, 79, 0, 0, 0 },
+            { 0, 0, 0, 0, 0, 0 }, { 83, 72, 65, 78, 0, 0 },
+            { 0, 0, 0, 0, 0, 0 }, };
+
+    /**
+     * Initial and last Chinese character with known Pinyin according to zh
+     * collation
+     */
+    private static final String INITIAL_PINYIN_UNIHAN = "\u963F";
+    private static final String LAST_PINYIN_UNIHAN = "\u9FFF";
+
+    private static final Collator COLLATOR = Collator.getInstance(Locale.CHINA);
+
+    private static HanziToPinyin sInstance;
+    private final boolean mHasChinaCollator;
+
+    public static class Token {
+        /**
+         * Separator between target string for each source char
+         */
+        public static final String SEPARATOR = " ";
+
+        public static final int LATIN = 1;
+        public static final int PINYIN = 2;
+        public static final int UNKNOWN = 3;
+
+        public Token() {
+        }
+
+        public Token(int type, String source, String target) {
+            this.type = type;
+            this.source = source;
+            this.target = target;
+        }
+
+        /**
+         * Type of this token, ASCII, PINYIN or UNKNOWN.
+         */
+        public int type;
+        /**
+         * Original string before translation.
+         */
+        public String source;
+        /**
+         * Translated string of source. For Han, target is corresponding Pinyin.
+         * Otherwise target is original string in source.
+         */
+        public String target;
+    }
+
+    protected HanziToPinyin(boolean hasChinaCollator) {
+        mHasChinaCollator = hasChinaCollator;
+    }
+
+    public static HanziToPinyin getInstance() {
+        synchronized (HanziToPinyin.class) {
+            if (sInstance != null) {
+                return sInstance;
+            }
+            // Check if zh_CN collation data is available
+            final Locale locale[] = Collator.getAvailableLocales();
+
+            final Locale chinaAddition = new Locale("zh");
+
+            for (int i = 0; i < locale.length; i++) {
+                if (locale[i].equals(Locale.CHINA)
+                        || locale[i].equals(chinaAddition)) {
+                    // Do self validation just once.
+                    if (DEBUG) {
+                        Log.d(TAG, "Self validation. Result: "
+                                + doSelfValidation());
+                    }
+                    sInstance = new HanziToPinyin(true);
+                    return sInstance;
+                }
+            }
+            Log.w(TAG,
+                    "There is no Chinese collator, HanziToPinyin is disabled");
+            sInstance = new HanziToPinyin(false);
+            return sInstance;
+        }
+    }
+
+    /**
+     * Validate if our internal table has some wrong value.
+     *
+     * @return true when the table looks correct.
+     */
+    private static boolean doSelfValidation() {
+        char lastChar = UNIHANS[0];
+        String lastString = Character.toString(lastChar);
+        for (char c : UNIHANS) {
+            if (lastChar == c) {
+                continue;
+            }
+            final String curString = Character.toString(c);
+            int cmp = COLLATOR.compare(lastString, curString);
+            if (cmp >= 0) {
+                Log.e(TAG, "Internal error in Unihan table. "
+                        + "The last string \"" + lastString
+                        + "\" is greater than current string \"" + curString
+                        + "\".");
+                return false;
+            }
+            lastString = curString;
+        }
+        return true;
+    }
+
+    private Token getToken(char character) {
+        Token token = new Token();
+        final String letter = Character.toString(character);
+        token.source = letter;
+        int offset = -1;
+        int cmp;
+        if (character < 256) {
+            token.type = Token.LATIN;
+            token.target = letter;
+            return token;
+        } else {
+            cmp = COLLATOR.compare(letter, INITIAL_PINYIN_UNIHAN);
+            if (cmp < 0) {
+                token.type = Token.UNKNOWN;
+                token.target = letter;
+                return token;
+            } else if (cmp == 0) {
+                token.type = Token.PINYIN;
+                offset = 0;
+            } else {
+                cmp = COLLATOR.compare(letter, LAST_PINYIN_UNIHAN);
+                if (cmp > 0) {
+                    token.type = Token.UNKNOWN;
+                    token.target = letter;
+                    return token;
+                } else if (cmp == 0) {
+                    token.type = Token.PINYIN;
+                    offset = UNIHANS.length - 1;
+                }
+            }
+        }
+
+        token.type = Token.PINYIN;
+        if (offset < 0) {
+            int begin = 0;
+            int end = UNIHANS.length - 1;
+            while (begin <= end) {
+                offset = (begin + end) / 2;
+                final String unihan = Character.toString(UNIHANS[offset]);
+                cmp = COLLATOR.compare(letter, unihan);
+                if (cmp == 0) {
+                    break;
+                } else if (cmp > 0) {
+                    begin = offset + 1;
+                } else {
+                    end = offset - 1;
+                }
+            }
+        }
+        if (cmp < 0) {
+            offset--;
+        }
+        StringBuilder pinyin = new StringBuilder();
+        for (int j = 0; j < PINYINS[offset].length && PINYINS[offset][j] != 0; j++) {
+            pinyin.append((char) PINYINS[offset][j]);
+        }
+        token.target = pinyin.toString();
+        if (TextUtils.isEmpty(token.target)) {
+            token.type = Token.UNKNOWN;
+            token.target = token.source;
+        }
+        return token;
+    }
+
+    /**
+     * Convert the input to a array of tokens. The sequence of ASCII or Unknown
+     * characters without space will be put into a Token, One Hanzi character
+     * which has pinyin will be treated as a Token. If these is no China
+     * collator, the empty token array is returned.
+     */
+    public ArrayList<Token> get(final String input) {
+        ArrayList<Token> tokens = new ArrayList<Token>();
+        if (!mHasChinaCollator || TextUtils.isEmpty(input)) {
+            // return empty tokens.
+            return tokens;
+        }
+        final int inputLength = input.length();
+        final StringBuilder sb = new StringBuilder();
+        int tokenType = Token.LATIN;
+        // Go through the input, create a new token when
+        // a. Token type changed
+        // b. Get the Pinyin of current charater.
+        // c. current character is space.
+        for (int i = 0; i < inputLength; i++) {
+            final char character = input.charAt(i);
+            if (character == ' ') {
+                if (sb.length() > 0) {
+                    addToken(sb, tokens, tokenType);
+                }
+            } else if (character < 256) {
+                if (tokenType != Token.LATIN && sb.length() > 0) {
+                    addToken(sb, tokens, tokenType);
+                }
+                tokenType = Token.LATIN;
+                sb.append(character);
+            } else {
+                Token t = getToken(character);
+                if (t.type == Token.PINYIN) {
+                    if (sb.length() > 0) {
+                        addToken(sb, tokens, tokenType);
+                    }
+                    tokens.add(t);
+                    tokenType = Token.PINYIN;
+                } else {
+                    if (tokenType != t.type && sb.length() > 0) {
+                        addToken(sb, tokens, tokenType);
+                    }
+                    tokenType = t.type;
+                    sb.append(character);
+                }
+            }
+        }
+        if (sb.length() > 0) {
+            addToken(sb, tokens, tokenType);
+        }
+        return tokens;
+    }
+
+    private void addToken(final StringBuilder sb,
+                          final ArrayList<Token> tokens, final int tokenType) {
+        String str = sb.toString();
+        tokens.add(new Token(tokenType, str, str));
+        sb.setLength(0);
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/startupmenu/utils/Util.java b/packages/SystemUI/src/com/android/systemui/startupmenu/utils/Util.java
new file mode 100644
index 0000000..6195bce
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/startupmenu/utils/Util.java
@@ -0,0 +1,491 @@
+package com.android.systemui.startupmenu.utils;
+
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.provider.Settings;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.android.systemui.R;
+import com.android.systemui.startupmenu.bean.AppInfo;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+public class Util {
+    private static String TAG = "StartupMenuView";
+    private static String indexStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
+    public static String FILEMANAGER = "org.openthos.filemanager";
+    public static String SETTINGS = "com.android.settings";
+    public static String APP_RECENT = "app_recent_list";
+    public static String DOC_RECENT = "doc_recent_list";
+    public static HashMap<String, AppInfo> speApps = new HashMap<>();
+    private static final String[] [] MIME_MapTable = {
+        {"doc", "application/msword"},
+        {"docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"},
+        {"xls", "application/vnd.ms-excel"},
+        {"xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"},
+        {"ppt", "application/vnd.ms-powerpoint"},
+        {"pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation"},
+        {"pqf", "application/x-cprplayer"},
+        {"txt", "text/plain"}
+    };
+
+    public static String getTimeFormatText(Context context, AppInfo appInfo) {
+        long minute = 60 * 1000;
+        long hour = 60 * minute;
+        long day = 24 * hour;
+        long month = 31 * day;
+        long year = 12 * month;
+
+        long diff = System.currentTimeMillis() - appInfo.getTime();
+        long r = 0;
+        if (diff > year) {
+            return appInfo.getYear() + context.getResources().getString(R.string.year)
+                    + appInfo.getMonth() + context.getResources().getString(R.string.month)
+                    + appInfo.getDay() + context.getResources().getString(R.string.day);
+        }
+        if (diff > day) {
+            return appInfo.getMonth() + context.getResources().getString(R.string.month)
+                    + appInfo.getDay() + context.getResources().getString(R.string.day);
+        }
+        if (diff > hour) {
+            r = (diff / hour);
+            return r + context.getResources().getString(R.string.hours_ago);
+        }
+        if (diff > minute) {
+            r = (diff / minute);
+            return r + context.getResources().getString(R.string.minutes_ago);
+        }
+        return context.getResources().getString(R.string.now);
+    }
+
+    public static void sortDatasByNameLetter(List<AppInfo> appsData) {
+        chineseToPinyin(appsData) ;
+        Collections.sort(appsData, new Comparator<AppInfo>() {
+            @Override
+            public int compare(AppInfo o1, AppInfo o2) {
+                return o1.getNamePinYin().compareTo(o2.getNamePinYin());
+            }
+        });
+    }
+
+    public static void sortDatasByUseCount(Context context, List<AppInfo> appsUseCountData) {
+        Collections.sort(appsUseCountData, new Comparator<AppInfo>() {
+            @Override
+            public int compare(AppInfo o1, AppInfo o2) {
+                return o1.getUseCount() > o2.getUseCount() ? -1 : 1;
+            }
+        });
+        Settings.Global.putString(context.getContentResolver(),
+                APP_RECENT, serialize(appsUseCountData));
+    }
+
+    public static void sorRecentDocsByTime(Context context, List<AppInfo> recentDocsData) {
+        Collections.sort(recentDocsData, new Comparator<AppInfo>() {
+            @Override
+            public int compare(AppInfo o1, AppInfo o2) {
+                return o1.getTime() > o2.getTime() ? -1 : 1;
+            }
+        });
+        Settings.Global.putString(context.getContentResolver(),
+                DOC_RECENT, serialize(recentDocsData));
+    }
+
+    public static void getPinyinList(AppInfo appInfo) {
+        if (TextUtils.isEmpty(appInfo.getLabel())) {
+            return;
+        }
+        StringBuffer bufferNamePiny = new StringBuffer();
+        StringBuffer bufferNameMatch = new StringBuffer();
+        String name = appInfo.getLabel();
+        for (int i = 0; i < name.length(); i++) {
+            StringBuffer bufferNamePer = new StringBuffer();
+            String namePer = name.charAt(i) + "";
+            for (int j = 0; j < namePer.length(); j++) {
+                char character = namePer.charAt(j);
+                String pinCh = getPinYin(String.valueOf(character));
+                bufferNamePer.append(pinCh);
+                bufferNameMatch.append(pinCh.charAt(0));
+                bufferNamePiny.append(pinCh);
+            }
+            appInfo.getNamePinyinList().add(bufferNamePer.toString());
+        }
+        appInfo.setNamePinYin(bufferNamePiny.toString());
+        appInfo.setInitialPinPer(bufferNameMatch.toString());
+        String firstPinyin = appInfo.getNamePinYin().charAt(0) + "";
+        if (indexStr.contains(firstPinyin)) {
+            appInfo.setInitialLetter(firstPinyin);
+        } else {
+            appInfo.setInitialLetter("#");
+        }
+    }
+
+    public static void updateUninstalledDatas(String packageName,
+            List<AppInfo> appsData, List<AppInfo> appsUseCountData) {
+        removeAppInfo(packageName, appsData);
+        removeAppInfo(packageName, appsUseCountData);
+    }
+
+    public static void removeAppInfo(String packageName, List<AppInfo> datas) {
+        Iterator<AppInfo> datasIterator = datas.iterator();
+        while (datasIterator.hasNext()) {
+            AppInfo next = datasIterator.next();
+            if (packageName.equals(next.getPackageName()))
+                datasIterator.remove();
+        }
+    }
+
+    public static void updateInstalledDatas(Context context,
+             String packageName, List<AppInfo> appsData, List<AppInfo> appsUseCountData) {
+        try {
+            PackageManager pm = context.getPackageManager();
+            ResolveInfo info = findAppByPackageName(pm, packageName);
+            AppInfo appAdded = new AppInfo();
+            appAdded.setLabel((String) info.loadLabel(pm));
+            appAdded.setComponentName(new ComponentName(info.activityInfo.packageName,
+                    info.activityInfo.name));
+            getPinyinList(appAdded);
+            appsData.add(appAdded);
+            sortDatasByNameLetter(appsData);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    private static ResolveInfo findAppByPackageName(PackageManager pm, String packageName) {
+        ResolveInfo newAppInfo = null;
+        List<ResolveInfo> tempAllApps;
+        Intent mainIntent = new Intent(Intent.ACTION_MAIN, null);
+        mainIntent.addCategory(Intent.CATEGORY_LAUNCHER);
+        mainIntent.setPackage(packageName);
+        tempAllApps = pm.queryIntentActivities(mainIntent, 0);
+        newAppInfo = tempAllApps.get(0);
+        return newAppInfo;
+    }
+
+    public static String serialize(List<AppInfo> appUseCountData) {
+        ByteArrayOutputStream byteArrayOutputStream = null;
+        ObjectOutputStream objectOutputStream = null;
+        String serStr = null;
+        try {
+            byteArrayOutputStream = new ByteArrayOutputStream();
+            objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
+            objectOutputStream.writeObject(appUseCountData);
+            serStr = byteArrayOutputStream.toString("ISO-8859-1");
+            serStr = java.net.URLEncoder.encode(serStr, "UTF-8");
+            objectOutputStream.close();
+            byteArrayOutputStream.close();
+        } catch (Exception e) {
+            Log.e(TAG, "Error during serialize", e);
+        } finally {
+            if (objectOutputStream != null) {
+                try {
+                    objectOutputStream.close();
+                } catch (Exception e) {
+                    Log.e(TAG, "Error during serialize", e);
+                }
+            }
+            if (byteArrayOutputStream != null) {
+                try {
+                    byteArrayOutputStream.close();
+                } catch (Exception e) {
+                    Log.e(TAG, "Error during serialize", e);
+                }
+            }
+            return serStr;
+        }
+    }
+
+    public static List<AppInfo> deSerialization(String str) {
+        ByteArrayInputStream byteArrayInputStream = null;
+        ObjectInputStream objectInputStream = null;
+        List<AppInfo> appUseCountData = null;
+        try {
+            String redStr = java.net.URLDecoder.decode(str, "UTF-8");
+            byteArrayInputStream = new ByteArrayInputStream(redStr.getBytes("ISO-8859-1"));
+            objectInputStream = new ObjectInputStream(byteArrayInputStream);
+            appUseCountData = (List<AppInfo>) objectInputStream.readObject();
+            objectInputStream.close();
+            byteArrayInputStream.close();
+        } catch (Exception e) {
+            Log.e(TAG, "Error during serialize", e);
+        } finally {
+            if (objectInputStream != null) {
+                try {
+                    objectInputStream.close();
+                } catch (Exception e) {
+                    Log.e(TAG, "Error during serialize", e);
+                }
+            }
+            if (byteArrayInputStream != null) {
+                try {
+                    byteArrayInputStream.close();
+                } catch (Exception e) {
+                    Log.e(TAG, "Error during serialize", e);
+                }
+            }
+            return appUseCountData;
+        }
+    }
+
+    public static AppInfo getSpeApps(String packageName){
+        return speApps.get(packageName);
+    }
+
+    public static String getMIMEType(File file) {
+        String type = "*/*";
+
+        String name = file.getName();
+        int dotIndex = name.lastIndexOf(".");
+        if (dotIndex < 0) {
+            return type;
+        }
+        String end = name.substring(name.lastIndexOf(".") + 1, name.length()).toLowerCase();
+        if (end.equals("")) return type;
+        for (int i = 0; i < MIME_MapTable.length; i++) {
+            if (end.equals(MIME_MapTable[i][0]))
+                type = MIME_MapTable[i][1];
+        }
+        return type;
+    }
+
+    public static void filtDatas(String inputStr, List<AppInfo> original, List<AppInfo> appsList) {
+        if (original.size() == 0) {
+            return;
+        }
+        if (TextUtils.isEmpty(inputStr)) {
+            resetSearchData(original);
+            appsList.clear();
+            appsList.addAll(original);
+        } else {
+            appsList.clear();
+            resetSearchData(original);
+            if (isNumeric(inputStr)) {
+                findDataByNumberOrCN(inputStr, original, appsList);
+            } else if (isContainChinese(inputStr)) {
+                findDataByNumberOrCN(inputStr, original, appsList);
+            } else if (isEnglishAlphabet(inputStr)) {
+                findDataByEN(inputStr, original, appsList);
+            } else {
+                findDataByNumberOrCN(inputStr, original, appsList);
+            }
+        }
+    }
+
+    public static void resetSearchData(List<AppInfo> original) {
+        for (int i = 0; i < original.size(); i++) {
+            original.get(i).setMatchType(0);
+        }
+    }
+
+    public static void findDataByNumberOrCN(String inputStr, List<AppInfo> original,
+                                      List<AppInfo> appsList) {
+        for (int i = 0; i < original.size(); i++) {
+            AppInfo appInfo = original.get(i);
+            if (!TextUtils.isEmpty(appInfo.getLabel()) && appInfo.getLabel().contains(inputStr)) {
+                appInfo.setMatchType(1);
+                appsList.add(appInfo);
+                continue;
+            }
+            if (appInfo.getNumberList().size() > 0) {
+                for (int j = 0; j < appInfo.getNumberList().size(); j++) {
+                    String number = appInfo.getNumberList().get(j);
+                    if (!TextUtils.isEmpty(number) && number.contains(inputStr)) {
+                        appInfo.setMatchType(2);
+                        appsList.add(appInfo);
+                    }
+                }
+            }
+        }
+    }
+
+    public static void findDataByEN(String inputStr, List<AppInfo> original,
+                              List<AppInfo> appsList) {
+        String searchPinyin = getPinYin(inputStr);
+        int searchLength = searchPinyin.length();
+        String searchPinyinInitial = searchPinyin.charAt(0) + "";
+        for (int i = 0; i < original.size(); i++) {
+            AppInfo appInfo = original.get(i);
+            appInfo.setMatchType(1);
+            if (appInfo.getInitialPinPer().contains(searchPinyin)) {
+                appsList.add(appInfo);
+            } else {
+                boolean isMatch = false;
+                for (int j = 0; j < appInfo.getNamePinyinList().size(); j++) {
+                    String namePinyinPer = appInfo.getNamePinyinList().get(j);
+                    if (!TextUtils.isEmpty(namePinyinPer) && namePinyinPer.startsWith(searchPinyin)) {
+                        appsList.add(appInfo);
+                        isMatch = true;
+                        break;
+                    }
+                }
+                if (isMatch) {
+                    continue;
+                }
+                if (!TextUtils.isEmpty(appInfo.getNamePinYin())
+                        && appInfo.getNamePinYin().contains(searchPinyin)) {
+                    for (int j = 0; j < appInfo.getNamePinyinList().size(); j++) {
+                        StringBuilder sbMatch = new StringBuilder();
+                        for (int k = j; k < appInfo.getNamePinyinList().size(); k++) {
+                            sbMatch.append(appInfo.getNamePinyinList().get(k));
+                        }
+                        if (sbMatch.toString().startsWith(searchPinyin)) {
+                            int length = 0;
+                            for (int k = j; k < appInfo.getNamePinyinList().size(); k++) {
+                                length = length + appInfo.getNamePinyinList().get(k).length();
+                                if (length >= searchLength) {
+                                    break;
+                                }
+                            }
+                            isMatch = true;
+                            appsList.add(appInfo);
+                        }
+                    }
+                }
+
+                if (isMatch) {
+                    continue;
+                }
+
+                if (appInfo.getNamePinyinList().size() > 2) {
+                    for (int j = 0; j < appInfo.getNamePinyinList().size(); j++) {
+
+                        StringBuilder sbMatch0 = new StringBuilder();
+                        sbMatch0.append(appInfo.getNamePinyinList().get(j));
+                        if (j < appInfo.getNamePinyinList().size() - 2) {
+                            for (int k = j + 1; k < appInfo.getInitialPinPer().length(); k++) {
+                                sbMatch0.append(appInfo.getInitialPinPer().charAt(k));
+                                if (sbMatch0.toString().equals(searchPinyin)) {
+                                    appsList.add(appInfo);
+                                    isMatch = true;
+                                    break;
+                                }
+                            }
+                        }
+
+                        if (isMatch) {
+                            break;
+                        }
+
+                        StringBuilder sbMatch1 = new StringBuilder();
+                        for (int k = 0; k <= j; k++) {
+                            sbMatch1.append(appInfo.getNamePinyinList().get(k));
+                        }
+                        if (j < appInfo.getNamePinyinList().size() - 2) {
+                            for (int k = j + 1; k < appInfo.getInitialPinPer().length(); k++) {
+                                sbMatch1.append(appInfo.getInitialPinPer().charAt(k));
+                                if (sbMatch1.toString().equals(searchPinyin)) {
+                                    appsList.add(appInfo);
+                                    isMatch = true;
+                                    break;
+                                }
+                            }
+                        }
+                        if (isMatch) {
+                            break;
+                        }
+
+                        if (j >= appInfo.getNamePinyinList().size() - 2) {
+                            break;
+                        }
+                        StringBuilder sbMatch2 = new StringBuilder();
+                        sbMatch2.append(appInfo.getNamePinyinList().get(j));
+                        for (int k = j + 1; k < appInfo.getNamePinyinList().size(); k++) {
+                            sbMatch2.append(appInfo.getNamePinyinList().get(k));
+                            StringBuilder sbMatch3 = new StringBuilder();
+                            sbMatch3.append(sbMatch2.toString());
+                            if (j < appInfo.getNamePinyinList().size() - 2) {
+                                for (int m = k + 1; m < appInfo.getInitialPinPer().length(); m++) {
+                                    sbMatch3.append(appInfo.getInitialPinPer().charAt(m));
+                                    if (sbMatch3.toString().equals(searchPinyin)) {
+                                        appsList.add(appInfo);
+                                        isMatch = true;
+                                        break;
+                                    }
+                                }
+                            }
+                            if (isMatch) {
+                                break;
+                            }
+                        }
+
+                        if (isMatch) {
+                            break;
+                        }
+                    }
+                }
+
+            }
+        }
+    }
+
+    private static boolean isNumeric(String str) {
+        String regEx = "^-?[0-9]+$";
+        Pattern pat = Pattern.compile(regEx);
+        Matcher mat = pat.matcher(str);
+        return mat.find();
+    }
+
+    private static boolean isContainChinese(String str) {
+        Pattern p = Pattern.compile("[\u4e00-\u9fa5]");
+        Matcher m = p.matcher(str);
+        return m.find();
+    }
+
+    private static boolean isEnglishAlphabet(String str) {
+        Pattern p = Pattern.compile("^[A-Za-z]+$");
+        Matcher m = p.matcher(str);
+        return m.find();
+    }
+
+    private static String getPinYin(String hanzi) {
+        if (!isContainChinese(hanzi)) {
+            return hanzi.toUpperCase();
+        }
+        ArrayList<HanziToPinyin.Token> tokens = HanziToPinyin.getInstance().get(hanzi);
+        StringBuilder sb = new StringBuilder();
+        if (tokens != null && tokens.size() > 0) {
+            for (HanziToPinyin.Token token : tokens) {
+                if (HanziToPinyin.Token.PINYIN == token.type) {
+                    sb.append(token.target);
+                } else {
+                    sb.append(token.source);
+                }
+            }
+        }
+        return sb.toString().toUpperCase();
+    }
+
+    private static void chineseToPinyin(List<AppInfo> list) {
+        for (int i = 0; i < list.size(); i++) {
+            AppInfo app = list.get(i);
+            String pinyinString = getPinYin(app.getLabel());
+            app.setPinYin(pinyinString);
+
+            char tempChar = pinyinString.charAt(0);
+            if ((tempChar < 'A' || tempChar > 'Z')) {
+                app.setInitialLetter("#");
+            } else {
+                app.setInitialLetter(String.valueOf(tempChar));
+            }
+        }
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/QSView.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/QSView.java
index afa7d73..e60a6f4 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/QSView.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/QSView.java
@@ -2,6 +2,7 @@ package com.android.systemui.statusbar.phone;
 
 import android.content.ComponentName;
 import android.content.Context;
+import android.content.Intent;
 import android.content.res.Configuration;
 import android.graphics.Canvas;
 import android.support.annotation.Nullable;
@@ -15,8 +16,6 @@ import android.widget.LinearLayout;
 import android.util.AttributeSet;
 import android.widget.TextView;
 
-import com.android.systemui.startupmenu.LaunchAppUtil;
-
 import com.android.systemui.R;
 
 /**
@@ -88,8 +87,7 @@ public class QSView extends LinearLayout {
                     }
                     break;
                 case R.id.qs_settings:
-                    LaunchAppUtil.launchApp(getContext(),
-                            new ComponentName("com.android.settings", "com.android.settings.Settings"));
+                    openSettings();
                     break;
                 case R.id.qs_projection:
                     break;
@@ -112,6 +110,16 @@ public class QSView extends LinearLayout {
         return super.onTouchEvent(event);
     }
 
+    private void openSettings() {
+        Intent intent = new Intent();
+        intent.setComponent(new ComponentName("com.android.settings", "com.android.settings.Settings"));
+        intent.setAction(Intent.ACTION_MAIN);
+        intent.addCategory(Intent.CATEGORY_LAUNCHER);
+        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
+        getContext().startActivity(intent, null);
+    }
+
     public void stopAllConnection(boolean state) {
         final ConnectivityManager mgr = (ConnectivityManager) mContext
                 .getSystemService(Context.CONNECTIVITY_SERVICE);
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
index 190c886..e831ece 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
@@ -258,7 +258,6 @@ import com.android.systemui.statusbar.view.TaskBarIcon;
 import com.android.systemui.util.NotificationChannels;
 import com.android.systemui.util.leak.LeakDetector;
 import com.android.systemui.volume.VolumeComponent;
-import com.android.systemui.startupmenu.SqliteOpenHelper;
 
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
@@ -1045,8 +1044,7 @@ public class StatusBar extends SystemUI implements DemoMode,
 
         Dependency.get(ConfigurationController.class).addCallback(this);
 
-        AppOperateManager.getInstance(mContext).reloadData();
-        initTaskbarIcons();
+        AppOperateManager.getInstance(mContext).initTaskbarIcons();
     }
 
     protected void createIconController() {
@@ -3465,17 +3463,6 @@ public class StatusBar extends SystemUI implements DemoMode,
         return re;
     }
 
-
-    private void initTaskbarIcons() {
-        LinkedList<AppInfo> dockedList = deSerialization(getObject());
-        if (dockedList == null) {
-            return;
-        }
-        for (AppInfo info : dockedList) {
-            addToTaskbar(-1, info);
-        }
-    }
-
     @Override
     public void changeStatusBarIcon(int taskId, ComponentName componentName, boolean keep) {
         Log.i("StatusBar", "taskId " + taskId + " keep " + keep + " cmp" + componentName);
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/view/TaskBarIcon.java b/packages/SystemUI/src/com/android/systemui/statusbar/view/TaskBarIcon.java
index cefe045..e37e19e 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/view/TaskBarIcon.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/view/TaskBarIcon.java
@@ -158,7 +158,7 @@ public class TaskBarIcon extends FrameLayout implements View.OnTouchListener, Se
     @Override
     public void menuClick(View view, Dialog dialog, AppInfo appInfo, String menu, int taskId) {
         if (menu.equals(getContext().getString(R.string.open))) {
-            mOperateManager.openApplication(appInfo.getComponentName());
+            mOperateManager.openApplication(appInfo);
         } else if (menu.equals(getContext().getString(R.string.lock_to_task_bar))) {
             mOperateManager.addToTaskbar(taskId, appInfo.getComponentName());
         } else if (menu.equals(getContext().getString(R.string.unlock_from_task_bar))) {
@@ -184,11 +184,6 @@ public class TaskBarIcon extends FrameLayout implements View.OnTouchListener, Se
         dialog.dismiss();
     }
 
-    @Override
-    public void sortShow(View view, Dialog dialog, String menu) {
-        dialog.dismiss();
-    }
-
     private void showDialog() {
         mMenuDialog.setOnMenuClick(this);
         if (!isRun()) {
@@ -220,9 +215,8 @@ public class TaskBarIcon extends FrameLayout implements View.OnTouchListener, Se
                     am.setFocusedTask(mTasks.iterator().next());
                 }
             } else {
-                mOperateManager.openApplication(mComponentName/*getAppInfo().getComponentName()*/);
+                mOperateManager.openApplication(getAppInfo()/*getAppInfo().getComponentName()*/);
             }
-            //setFocusInApplications(true);
         } catch (Exception e) {
             e.printStackTrace();
         }
-- 
2.7.4

